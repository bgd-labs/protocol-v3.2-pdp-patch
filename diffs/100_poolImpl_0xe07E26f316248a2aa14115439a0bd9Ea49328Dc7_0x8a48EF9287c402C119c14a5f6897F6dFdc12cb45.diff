diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/AaveV3.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/AaveV3.sol
deleted file mode 100644
index 3b76751..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/AaveV3.sol
+++ /dev/null
@@ -1,35 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity >=0.6.0;
-
-import {DataTypes} from "aave-v3-core/contracts/protocol/libraries/types/DataTypes.sol";
-import {Errors} from "aave-v3-core/contracts/protocol/libraries/helpers/Errors.sol";
-import {ConfiguratorInputTypes} from "aave-v3-core/contracts/protocol/libraries/types/ConfiguratorInputTypes.sol";
-import {IPoolAddressesProvider} from "aave-v3-core/contracts/interfaces/IPoolAddressesProvider.sol";
-import {IAToken} from "aave-v3-core/contracts/interfaces/IAToken.sol";
-import {IPool} from "aave-v3-core/contracts/interfaces/IPool.sol";
-import {IPoolConfigurator} from "aave-v3-core/contracts/interfaces/IPoolConfigurator.sol";
-import {IPriceOracleGetter} from "aave-v3-core/contracts/interfaces/IPriceOracleGetter.sol";
-import {IAaveOracle} from "aave-v3-core/contracts/interfaces/IAaveOracle.sol";
-import {IACLManager as BasicIACLManager} from "aave-v3-core/contracts/interfaces/IACLManager.sol";
-import {IPoolDataProvider} from "aave-v3-core/contracts/interfaces/IPoolDataProvider.sol";
-import {IDefaultInterestRateStrategy} from "aave-v3-core/contracts/interfaces/IDefaultInterestRateStrategy.sol";
-import {IReserveInterestRateStrategy} from "aave-v3-core/contracts/interfaces/IReserveInterestRateStrategy.sol";
-import {IPoolDataProvider as IAaveProtocolDataProvider} from "aave-v3-core/contracts/interfaces/IPoolDataProvider.sol";
-import {AggregatorInterface} from "aave-v3-core/contracts/dependencies/chainlink/AggregatorInterface.sol";
-
-interface IACLManager is BasicIACLManager {
-    function hasRole(
-        bytes32 role,
-        address account
-    ) external view returns (bool);
-
-    function DEFAULT_ADMIN_ROLE() external pure returns (bytes32);
-
-    function renounceRole(bytes32 role, address account) external;
-
-    function getRoleAdmin(bytes32 role) external view returns (bytes32);
-
-    function grantRole(bytes32 role, address account) external;
-
-    function revokeRole(bytes32 role, address account) external;
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/AaveV3Ethereum.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/AaveV3Ethereum.sol
deleted file mode 100644
index 0abe12f..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/AaveV3Ethereum.sol
+++ /dev/null
@@ -1,934 +0,0 @@
-// AUTOGENERATED - MANUALLY CHANGES WILL BE REVERTED BY THE GENERATOR
-// SPDX-License-Identifier: MIT
-pragma solidity >=0.6.0;
-
-import {IPoolAddressesProvider, IPool, IPoolConfigurator, IAaveOracle, IPoolDataProvider, IACLManager} from "./AaveV3.sol";
-import {ICollector} from "./common/ICollector.sol";
-
-library AaveV3Ethereum {
-    // https://etherscan.io/address/0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e
-    IPoolAddressesProvider internal constant POOL_ADDRESSES_PROVIDER =
-        IPoolAddressesProvider(0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e);
-
-    // https://etherscan.io/address/0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2
-    IPool internal constant POOL =
-        IPool(0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2);
-
-    // https://etherscan.io/address/0x5FAab9E1adbddaD0a08734BE8a52185Fd6558E14
-    address internal constant POOL_IMPL =
-        0x5FAab9E1adbddaD0a08734BE8a52185Fd6558E14;
-
-    // https://etherscan.io/address/0x64b761D848206f447Fe2dd461b0c635Ec39EbB27
-    IPoolConfigurator internal constant POOL_CONFIGURATOR =
-        IPoolConfigurator(0x64b761D848206f447Fe2dd461b0c635Ec39EbB27);
-
-    // https://etherscan.io/address/0xFDA7ffA872bDc906D43079EA134ebC9a511db0c2
-    address internal constant POOL_CONFIGURATOR_IMPL =
-        0xFDA7ffA872bDc906D43079EA134ebC9a511db0c2;
-
-    // https://etherscan.io/address/0x54586bE62E3c3580375aE3723C145253060Ca0C2
-    IAaveOracle internal constant ORACLE =
-        IAaveOracle(0x54586bE62E3c3580375aE3723C145253060Ca0C2);
-
-    // https://etherscan.io/address/0x7B4EB56E7CD4b454BA8ff71E4518426369a138a3
-    IPoolDataProvider internal constant AAVE_PROTOCOL_DATA_PROVIDER =
-        IPoolDataProvider(0x7B4EB56E7CD4b454BA8ff71E4518426369a138a3);
-
-    // https://etherscan.io/address/0xc2aaCf6553D20d1e9d78E365AAba8032af9c85b0
-    IACLManager internal constant ACL_MANAGER =
-        IACLManager(0xc2aaCf6553D20d1e9d78E365AAba8032af9c85b0);
-
-    // https://etherscan.io/address/0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A
-    address internal constant ACL_ADMIN =
-        0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A;
-
-    // https://etherscan.io/address/0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c
-    ICollector internal constant COLLECTOR =
-        ICollector(0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c);
-
-    // https://etherscan.io/address/0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb
-    address internal constant DEFAULT_INCENTIVES_CONTROLLER =
-        0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb;
-
-    // https://etherscan.io/address/0x7EfFD7b47Bfd17e52fB7559d3f924201b9DbfF3d
-    address internal constant DEFAULT_A_TOKEN_IMPL_REV_1 =
-        0x7EfFD7b47Bfd17e52fB7559d3f924201b9DbfF3d;
-
-    // https://etherscan.io/address/0xaC725CB59D16C81061BDeA61041a8A5e73DA9EC6
-    address internal constant DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1 =
-        0xaC725CB59D16C81061BDeA61041a8A5e73DA9EC6;
-
-    // https://etherscan.io/address/0x15C5620dfFaC7c7366EED66C20Ad222DDbB1eD57
-    address internal constant DEFAULT_STABLE_DEBT_TOKEN_IMPL_REV_1 =
-        0x15C5620dfFaC7c7366EED66C20Ad222DDbB1eD57;
-
-    // https://etherscan.io/address/0x223d844fc4B006D67c0cDbd39371A9F73f69d974
-    address internal constant EMISSION_MANAGER =
-        0x223d844fc4B006D67c0cDbd39371A9F73f69d974;
-
-    // https://etherscan.io/address/0x82dcCF206Ae2Ab46E2099e663F70DeE77caE7778
-    address internal constant CAPS_PLUS_RISK_STEWARD =
-        0x82dcCF206Ae2Ab46E2099e663F70DeE77caE7778;
-
-    // https://etherscan.io/address/0x2eE68ACb6A1319de1b49DC139894644E424fefD6
-    address internal constant FREEZING_STEWARD =
-        0x2eE68ACb6A1319de1b49DC139894644E424fefD6;
-
-    // https://etherscan.io/address/0x8761e0370f94f68Db8EaA731f4fC581f6AD0Bd68
-    address internal constant DEBT_SWAP_ADAPTER =
-        0x8761e0370f94f68Db8EaA731f4fC581f6AD0Bd68;
-
-    // https://etherscan.io/address/0x21714092D90c7265F52fdfDae068EC11a23C6248
-    address internal constant DELEGATION_AWARE_A_TOKEN_IMPL_REV_1 =
-        0x21714092D90c7265F52fdfDae068EC11a23C6248;
-
-    // https://etherscan.io/address/0xA3e44d830440dF5098520F62Ebec285B1198c51E
-    address internal constant CONFIG_ENGINE =
-        0xA3e44d830440dF5098520F62Ebec285B1198c51E;
-
-    // https://etherscan.io/address/0xbaA999AC55EAce41CcAE355c77809e68Bb345170
-    address internal constant POOL_ADDRESSES_PROVIDER_REGISTRY =
-        0xbaA999AC55EAce41CcAE355c77809e68Bb345170;
-
-    // https://etherscan.io/address/0xcC47c4Fe1F7f29ff31A8b62197023aC8553C7896
-    address internal constant RATES_FACTORY =
-        0xcC47c4Fe1F7f29ff31A8b62197023aC8553C7896;
-
-    // https://etherscan.io/address/0x02e7B8511831B1b02d9018215a0f8f500Ea5c6B3
-    address internal constant REPAY_WITH_COLLATERAL_ADAPTER =
-        0x02e7B8511831B1b02d9018215a0f8f500Ea5c6B3;
-
-    // https://etherscan.io/address/0x411D79b8cC43384FDE66CaBf9b6a17180c842511
-    address internal constant STATIC_A_TOKEN_FACTORY =
-        0x411D79b8cC43384FDE66CaBf9b6a17180c842511;
-
-    // https://etherscan.io/address/0xADC0A53095A0af87F3aa29FE0715B5c28016364e
-    address internal constant SWAP_COLLATERAL_ADAPTER =
-        0xADC0A53095A0af87F3aa29FE0715B5c28016364e;
-
-    // https://etherscan.io/address/0x379c1EDD1A41218bdbFf960a9d5AD2818Bf61aE8
-    address internal constant UI_GHO_DATA_PROVIDER =
-        0x379c1EDD1A41218bdbFf960a9d5AD2818Bf61aE8;
-
-    // https://etherscan.io/address/0x162A7AC02f547ad796CA549f757e2b8d1D9b10a6
-    address internal constant UI_INCENTIVE_DATA_PROVIDER =
-        0x162A7AC02f547ad796CA549f757e2b8d1D9b10a6;
-
-    // https://etherscan.io/address/0x91c0eA31b49B69Ea18607702c5d9aC360bf3dE7d
-    address internal constant UI_POOL_DATA_PROVIDER =
-        0x91c0eA31b49B69Ea18607702c5d9aC360bf3dE7d;
-
-    // https://etherscan.io/address/0xC7be5307ba715ce89b152f3Df0658295b3dbA8E2
-    address internal constant WALLET_BALANCE_PROVIDER =
-        0xC7be5307ba715ce89b152f3Df0658295b3dbA8E2;
-
-    // https://etherscan.io/address/0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9
-    address internal constant WETH_GATEWAY =
-        0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9;
-
-    // https://etherscan.io/address/0x78F8Bd884C3D738B74B420540659c82f392820e0
-    address internal constant WITHDRAW_SWAP_ADAPTER =
-        0x78F8Bd884C3D738B74B420540659c82f392820e0;
-
-    // https://etherscan.io/address/0xE28E2c8d240dd5eBd0adcab86fbD79df7a052034
-    address internal constant SAVINGS_DAI_TOKEN_WRAPPER =
-        0xE28E2c8d240dd5eBd0adcab86fbD79df7a052034;
-}
-
-library AaveV3EthereumAssets {
-    // https://etherscan.io/address/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
-    address internal constant WETH_UNDERLYING =
-        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
-
-    uint8 internal constant WETH_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x4d5F47FA6A74757f35C14fD3a6Ef8E3C9BC514E8
-    address internal constant WETH_A_TOKEN =
-        0x4d5F47FA6A74757f35C14fD3a6Ef8E3C9BC514E8;
-
-    // https://etherscan.io/address/0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE
-    address internal constant WETH_V_TOKEN =
-        0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE;
-
-    // https://etherscan.io/address/0x102633152313C81cD80419b6EcF66d14Ad68949A
-    address internal constant WETH_S_TOKEN =
-        0x102633152313C81cD80419b6EcF66d14Ad68949A;
-
-    // https://etherscan.io/address/0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419
-    address internal constant WETH_ORACLE =
-        0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;
-
-    // https://etherscan.io/address/0x06B1Ec378618EA736a65395eA5CAB69A2410493B
-    address internal constant WETH_INTEREST_RATE_STRATEGY =
-        0x06B1Ec378618EA736a65395eA5CAB69A2410493B;
-
-    // https://etherscan.io/address/0x252231882FB38481497f3C767469106297c8d93b
-    address internal constant WETH_STATA_TOKEN =
-        0x252231882FB38481497f3C767469106297c8d93b;
-
-    // https://etherscan.io/address/0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0
-    address internal constant wstETH_UNDERLYING =
-        0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;
-
-    uint8 internal constant wstETH_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x0B925eD163218f6662a35e0f0371Ac234f9E9371
-    address internal constant wstETH_A_TOKEN =
-        0x0B925eD163218f6662a35e0f0371Ac234f9E9371;
-
-    // https://etherscan.io/address/0xC96113eED8cAB59cD8A66813bCB0cEb29F06D2e4
-    address internal constant wstETH_V_TOKEN =
-        0xC96113eED8cAB59cD8A66813bCB0cEb29F06D2e4;
-
-    // https://etherscan.io/address/0x39739943199c0fBFe9E5f1B5B160cd73a64CB85D
-    address internal constant wstETH_S_TOKEN =
-        0x39739943199c0fBFe9E5f1B5B160cd73a64CB85D;
-
-    // https://etherscan.io/address/0xB4aB0c94159bc2d8C133946E7241368fc2F2a010
-    address internal constant wstETH_ORACLE =
-        0xB4aB0c94159bc2d8C133946E7241368fc2F2a010;
-
-    // https://etherscan.io/address/0x7b8Fa4540246554e77FCFf140f9114de00F8bB8D
-    address internal constant wstETH_INTEREST_RATE_STRATEGY =
-        0x7b8Fa4540246554e77FCFf140f9114de00F8bB8D;
-
-    // https://etherscan.io/address/0x322AA5F5Be95644d6c36544B6c5061F072D16DF5
-    address internal constant wstETH_STATA_TOKEN =
-        0x322AA5F5Be95644d6c36544B6c5061F072D16DF5;
-
-    // https://etherscan.io/address/0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599
-    address internal constant WBTC_UNDERLYING =
-        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;
-
-    uint8 internal constant WBTC_DECIMALS = 8;
-
-    // https://etherscan.io/address/0x5Ee5bf7ae06D1Be5997A1A72006FE6C607eC6DE8
-    address internal constant WBTC_A_TOKEN =
-        0x5Ee5bf7ae06D1Be5997A1A72006FE6C607eC6DE8;
-
-    // https://etherscan.io/address/0x40aAbEf1aa8f0eEc637E0E7d92fbfFB2F26A8b7B
-    address internal constant WBTC_V_TOKEN =
-        0x40aAbEf1aa8f0eEc637E0E7d92fbfFB2F26A8b7B;
-
-    // https://etherscan.io/address/0xA1773F1ccF6DB192Ad8FE826D15fe1d328B03284
-    address internal constant WBTC_S_TOKEN =
-        0xA1773F1ccF6DB192Ad8FE826D15fe1d328B03284;
-
-    // https://etherscan.io/address/0x230E0321Cf38F09e247e50Afc7801EA2351fe56F
-    address internal constant WBTC_ORACLE =
-        0x230E0321Cf38F09e247e50Afc7801EA2351fe56F;
-
-    // https://etherscan.io/address/0x07Fa3744FeC271F80c2EA97679823F65c13CCDf4
-    address internal constant WBTC_INTEREST_RATE_STRATEGY =
-        0x07Fa3744FeC271F80c2EA97679823F65c13CCDf4;
-
-    // https://etherscan.io/address/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
-    address internal constant USDC_UNDERLYING =
-        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
-
-    uint8 internal constant USDC_DECIMALS = 6;
-
-    // https://etherscan.io/address/0x98C23E9d8f34FEFb1B7BD6a91B7FF122F4e16F5c
-    address internal constant USDC_A_TOKEN =
-        0x98C23E9d8f34FEFb1B7BD6a91B7FF122F4e16F5c;
-
-    // https://etherscan.io/address/0x72E95b8931767C79bA4EeE721354d6E99a61D004
-    address internal constant USDC_V_TOKEN =
-        0x72E95b8931767C79bA4EeE721354d6E99a61D004;
-
-    // https://etherscan.io/address/0xB0fe3D292f4bd50De902Ba5bDF120Ad66E9d7a39
-    address internal constant USDC_S_TOKEN =
-        0xB0fe3D292f4bd50De902Ba5bDF120Ad66E9d7a39;
-
-    // https://etherscan.io/address/0x736bF902680e68989886e9807CD7Db4B3E015d3C
-    address internal constant USDC_ORACLE =
-        0x736bF902680e68989886e9807CD7Db4B3E015d3C;
-
-    // https://etherscan.io/address/0xd56eE97960b1b2953e751151Fd84888cF3F3b521
-    address internal constant USDC_INTEREST_RATE_STRATEGY =
-        0xd56eE97960b1b2953e751151Fd84888cF3F3b521;
-
-    // https://etherscan.io/address/0x73edDFa87C71ADdC275c2b9890f5c3a8480bC9E6
-    address internal constant USDC_STATA_TOKEN =
-        0x73edDFa87C71ADdC275c2b9890f5c3a8480bC9E6;
-
-    // https://etherscan.io/address/0x6B175474E89094C44Da98b954EedeAC495271d0F
-    address internal constant DAI_UNDERLYING =
-        0x6B175474E89094C44Da98b954EedeAC495271d0F;
-
-    uint8 internal constant DAI_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x018008bfb33d285247A21d44E50697654f754e63
-    address internal constant DAI_A_TOKEN =
-        0x018008bfb33d285247A21d44E50697654f754e63;
-
-    // https://etherscan.io/address/0xcF8d0c70c850859266f5C338b38F9D663181C314
-    address internal constant DAI_V_TOKEN =
-        0xcF8d0c70c850859266f5C338b38F9D663181C314;
-
-    // https://etherscan.io/address/0x413AdaC9E2Ef8683ADf5DDAEce8f19613d60D1bb
-    address internal constant DAI_S_TOKEN =
-        0x413AdaC9E2Ef8683ADf5DDAEce8f19613d60D1bb;
-
-    // https://etherscan.io/address/0xaEb897E1Dc6BbdceD3B9D551C71a8cf172F27AC4
-    address internal constant DAI_ORACLE =
-        0xaEb897E1Dc6BbdceD3B9D551C71a8cf172F27AC4;
-
-    // https://etherscan.io/address/0xa8C12113DB50549A1E36FD25982C88B69A0007E0
-    address internal constant DAI_INTEREST_RATE_STRATEGY =
-        0xa8C12113DB50549A1E36FD25982C88B69A0007E0;
-
-    // https://etherscan.io/address/0xaf270C38fF895EA3f95Ed488CEACe2386F038249
-    address internal constant DAI_STATA_TOKEN =
-        0xaf270C38fF895EA3f95Ed488CEACe2386F038249;
-
-    // https://etherscan.io/address/0x514910771AF9Ca656af840dff83E8264EcF986CA
-    address internal constant LINK_UNDERLYING =
-        0x514910771AF9Ca656af840dff83E8264EcF986CA;
-
-    uint8 internal constant LINK_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x5E8C8A7243651DB1384C0dDfDbE39761E8e7E51a
-    address internal constant LINK_A_TOKEN =
-        0x5E8C8A7243651DB1384C0dDfDbE39761E8e7E51a;
-
-    // https://etherscan.io/address/0x4228F8895C7dDA20227F6a5c6751b8Ebf19a6ba8
-    address internal constant LINK_V_TOKEN =
-        0x4228F8895C7dDA20227F6a5c6751b8Ebf19a6ba8;
-
-    // https://etherscan.io/address/0x63B1129ca97D2b9F97f45670787Ac12a9dF1110a
-    address internal constant LINK_S_TOKEN =
-        0x63B1129ca97D2b9F97f45670787Ac12a9dF1110a;
-
-    // https://etherscan.io/address/0x2c1d072e956AFFC0D435Cb7AC38EF18d24d9127c
-    address internal constant LINK_ORACLE =
-        0x2c1d072e956AFFC0D435Cb7AC38EF18d24d9127c;
-
-    // https://etherscan.io/address/0x24701A6368Ff6D2874d6b8cDadd461552B8A5283
-    address internal constant LINK_INTEREST_RATE_STRATEGY =
-        0x24701A6368Ff6D2874d6b8cDadd461552B8A5283;
-
-    // https://etherscan.io/address/0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9
-    address internal constant AAVE_UNDERLYING =
-        0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;
-
-    uint8 internal constant AAVE_DECIMALS = 18;
-
-    // https://etherscan.io/address/0xA700b4eB416Be35b2911fd5Dee80678ff64fF6C9
-    address internal constant AAVE_A_TOKEN =
-        0xA700b4eB416Be35b2911fd5Dee80678ff64fF6C9;
-
-    // https://etherscan.io/address/0xBae535520Abd9f8C85E58929e0006A2c8B372F74
-    address internal constant AAVE_V_TOKEN =
-        0xBae535520Abd9f8C85E58929e0006A2c8B372F74;
-
-    // https://etherscan.io/address/0x268497bF083388B1504270d0E717222d3A87D6F2
-    address internal constant AAVE_S_TOKEN =
-        0x268497bF083388B1504270d0E717222d3A87D6F2;
-
-    // https://etherscan.io/address/0x547a514d5e3769680Ce22B2361c10Ea13619e8a9
-    address internal constant AAVE_ORACLE =
-        0x547a514d5e3769680Ce22B2361c10Ea13619e8a9;
-
-    // https://etherscan.io/address/0x24701A6368Ff6D2874d6b8cDadd461552B8A5283
-    address internal constant AAVE_INTEREST_RATE_STRATEGY =
-        0x24701A6368Ff6D2874d6b8cDadd461552B8A5283;
-
-    // https://etherscan.io/address/0xBe9895146f7AF43049ca1c1AE358B0541Ea49704
-    address internal constant cbETH_UNDERLYING =
-        0xBe9895146f7AF43049ca1c1AE358B0541Ea49704;
-
-    uint8 internal constant cbETH_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x977b6fc5dE62598B08C85AC8Cf2b745874E8b78c
-    address internal constant cbETH_A_TOKEN =
-        0x977b6fc5dE62598B08C85AC8Cf2b745874E8b78c;
-
-    // https://etherscan.io/address/0x0c91bcA95b5FE69164cE583A2ec9429A569798Ed
-    address internal constant cbETH_V_TOKEN =
-        0x0c91bcA95b5FE69164cE583A2ec9429A569798Ed;
-
-    // https://etherscan.io/address/0x82bE6012cea6D147B968eBAea5ceEcF6A5b4F493
-    address internal constant cbETH_S_TOKEN =
-        0x82bE6012cea6D147B968eBAea5ceEcF6A5b4F493;
-
-    // https://etherscan.io/address/0x6243d2F41b4ec944F731f647589E28d9745a2674
-    address internal constant cbETH_ORACLE =
-        0x6243d2F41b4ec944F731f647589E28d9745a2674;
-
-    // https://etherscan.io/address/0x24701A6368Ff6D2874d6b8cDadd461552B8A5283
-    address internal constant cbETH_INTEREST_RATE_STRATEGY =
-        0x24701A6368Ff6D2874d6b8cDadd461552B8A5283;
-
-    // https://etherscan.io/address/0xdAC17F958D2ee523a2206206994597C13D831ec7
-    address internal constant USDT_UNDERLYING =
-        0xdAC17F958D2ee523a2206206994597C13D831ec7;
-
-    uint8 internal constant USDT_DECIMALS = 6;
-
-    // https://etherscan.io/address/0x23878914EFE38d27C4D67Ab83ed1b93A74D4086a
-    address internal constant USDT_A_TOKEN =
-        0x23878914EFE38d27C4D67Ab83ed1b93A74D4086a;
-
-    // https://etherscan.io/address/0x6df1C1E379bC5a00a7b4C6e67A203333772f45A8
-    address internal constant USDT_V_TOKEN =
-        0x6df1C1E379bC5a00a7b4C6e67A203333772f45A8;
-
-    // https://etherscan.io/address/0x822Fa72Df1F229C3900f5AD6C3Fa2C424D691622
-    address internal constant USDT_S_TOKEN =
-        0x822Fa72Df1F229C3900f5AD6C3Fa2C424D691622;
-
-    // https://etherscan.io/address/0xC26D4a1c46d884cfF6dE9800B6aE7A8Cf48B4Ff8
-    address internal constant USDT_ORACLE =
-        0xC26D4a1c46d884cfF6dE9800B6aE7A8Cf48B4Ff8;
-
-    // https://etherscan.io/address/0xc7b53C7d24164FB78F57Ea3b5d056bD2E541013d
-    address internal constant USDT_INTEREST_RATE_STRATEGY =
-        0xc7b53C7d24164FB78F57Ea3b5d056bD2E541013d;
-
-    // https://etherscan.io/address/0x862c57d48becB45583AEbA3f489696D22466Ca1b
-    address internal constant USDT_STATA_TOKEN =
-        0x862c57d48becB45583AEbA3f489696D22466Ca1b;
-
-    // https://etherscan.io/address/0xae78736Cd615f374D3085123A210448E74Fc6393
-    address internal constant rETH_UNDERLYING =
-        0xae78736Cd615f374D3085123A210448E74Fc6393;
-
-    uint8 internal constant rETH_DECIMALS = 18;
-
-    // https://etherscan.io/address/0xCc9EE9483f662091a1de4795249E24aC0aC2630f
-    address internal constant rETH_A_TOKEN =
-        0xCc9EE9483f662091a1de4795249E24aC0aC2630f;
-
-    // https://etherscan.io/address/0xae8593DD575FE29A9745056aA91C4b746eee62C8
-    address internal constant rETH_V_TOKEN =
-        0xae8593DD575FE29A9745056aA91C4b746eee62C8;
-
-    // https://etherscan.io/address/0x1d1906f909CAe494c7441604DAfDDDbD0485A925
-    address internal constant rETH_S_TOKEN =
-        0x1d1906f909CAe494c7441604DAfDDDbD0485A925;
-
-    // https://etherscan.io/address/0x5AE8365D0a30D67145f0c55A08760C250559dB64
-    address internal constant rETH_ORACLE =
-        0x5AE8365D0a30D67145f0c55A08760C250559dB64;
-
-    // https://etherscan.io/address/0x24701A6368Ff6D2874d6b8cDadd461552B8A5283
-    address internal constant rETH_INTEREST_RATE_STRATEGY =
-        0x24701A6368Ff6D2874d6b8cDadd461552B8A5283;
-
-    // https://etherscan.io/address/0x5f98805A4E8be255a32880FDeC7F6728C6568bA0
-    address internal constant LUSD_UNDERLYING =
-        0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;
-
-    uint8 internal constant LUSD_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x3Fe6a295459FAe07DF8A0ceCC36F37160FE86AA9
-    address internal constant LUSD_A_TOKEN =
-        0x3Fe6a295459FAe07DF8A0ceCC36F37160FE86AA9;
-
-    // https://etherscan.io/address/0x33652e48e4B74D18520f11BfE58Edd2ED2cEc5A2
-    address internal constant LUSD_V_TOKEN =
-        0x33652e48e4B74D18520f11BfE58Edd2ED2cEc5A2;
-
-    // https://etherscan.io/address/0x37A6B708FDB1483C231961b9a7F145261E815fc3
-    address internal constant LUSD_S_TOKEN =
-        0x37A6B708FDB1483C231961b9a7F145261E815fc3;
-
-    // https://etherscan.io/address/0x9eCdfaCca946614cc32aF63F3DBe50959244F3af
-    address internal constant LUSD_ORACLE =
-        0x9eCdfaCca946614cc32aF63F3DBe50959244F3af;
-
-    // https://etherscan.io/address/0xb96c569Ceb49440731DdD5D8c5E6DA3538f1CBF1
-    address internal constant LUSD_INTEREST_RATE_STRATEGY =
-        0xb96c569Ceb49440731DdD5D8c5E6DA3538f1CBF1;
-
-    // https://etherscan.io/address/0xDBf5E36569798D1E39eE9d7B1c61A7409a74F23A
-    address internal constant LUSD_STATA_TOKEN =
-        0xDBf5E36569798D1E39eE9d7B1c61A7409a74F23A;
-
-    // https://etherscan.io/address/0xD533a949740bb3306d119CC777fa900bA034cd52
-    address internal constant CRV_UNDERLYING =
-        0xD533a949740bb3306d119CC777fa900bA034cd52;
-
-    uint8 internal constant CRV_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x7B95Ec873268a6BFC6427e7a28e396Db9D0ebc65
-    address internal constant CRV_A_TOKEN =
-        0x7B95Ec873268a6BFC6427e7a28e396Db9D0ebc65;
-
-    // https://etherscan.io/address/0x1b7D3F4b3c032a5AE656e30eeA4e8E1Ba376068F
-    address internal constant CRV_V_TOKEN =
-        0x1b7D3F4b3c032a5AE656e30eeA4e8E1Ba376068F;
-
-    // https://etherscan.io/address/0x90D9CD005E553111EB8C9c31Abe9706a186b6048
-    address internal constant CRV_S_TOKEN =
-        0x90D9CD005E553111EB8C9c31Abe9706a186b6048;
-
-    // https://etherscan.io/address/0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f
-    address internal constant CRV_ORACLE =
-        0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f;
-
-    // https://etherscan.io/address/0x76884cAFeCf1f7d4146DA6C4053B18B76bf6ED14
-    address internal constant CRV_INTEREST_RATE_STRATEGY =
-        0x76884cAFeCf1f7d4146DA6C4053B18B76bf6ED14;
-
-    // https://etherscan.io/address/0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2
-    address internal constant MKR_UNDERLYING =
-        0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;
-
-    uint8 internal constant MKR_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x8A458A9dc9048e005d22849F470891b840296619
-    address internal constant MKR_A_TOKEN =
-        0x8A458A9dc9048e005d22849F470891b840296619;
-
-    // https://etherscan.io/address/0x6Efc73E54E41b27d2134fF9f98F15550f30DF9B1
-    address internal constant MKR_V_TOKEN =
-        0x6Efc73E54E41b27d2134fF9f98F15550f30DF9B1;
-
-    // https://etherscan.io/address/0x0496372BE7e426D28E89DEBF01f19F014d5938bE
-    address internal constant MKR_S_TOKEN =
-        0x0496372BE7e426D28E89DEBF01f19F014d5938bE;
-
-    // https://etherscan.io/address/0xec1D1B3b0443256cc3860e24a46F108e699484Aa
-    address internal constant MKR_ORACLE =
-        0xec1D1B3b0443256cc3860e24a46F108e699484Aa;
-
-    // https://etherscan.io/address/0x27eFE5db315b71753b2a38ED3d5dd7E9362ba93F
-    address internal constant MKR_INTEREST_RATE_STRATEGY =
-        0x27eFE5db315b71753b2a38ED3d5dd7E9362ba93F;
-
-    // https://etherscan.io/address/0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F
-    address internal constant SNX_UNDERLYING =
-        0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;
-
-    uint8 internal constant SNX_DECIMALS = 18;
-
-    // https://etherscan.io/address/0xC7B4c17861357B8ABB91F25581E7263E08DCB59c
-    address internal constant SNX_A_TOKEN =
-        0xC7B4c17861357B8ABB91F25581E7263E08DCB59c;
-
-    // https://etherscan.io/address/0x8d0de040e8aAd872eC3c33A3776dE9152D3c34ca
-    address internal constant SNX_V_TOKEN =
-        0x8d0de040e8aAd872eC3c33A3776dE9152D3c34ca;
-
-    // https://etherscan.io/address/0x478E1ec1A2BeEd94c1407c951E4B9e22d53b2501
-    address internal constant SNX_S_TOKEN =
-        0x478E1ec1A2BeEd94c1407c951E4B9e22d53b2501;
-
-    // https://etherscan.io/address/0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699
-    address internal constant SNX_ORACLE =
-        0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699;
-
-    // https://etherscan.io/address/0xA6459195d60A797D278f58Ffbd2BA62Fb3F7FA1E
-    address internal constant SNX_INTEREST_RATE_STRATEGY =
-        0xA6459195d60A797D278f58Ffbd2BA62Fb3F7FA1E;
-
-    // https://etherscan.io/address/0xba100000625a3754423978a60c9317c58a424e3D
-    address internal constant BAL_UNDERLYING =
-        0xba100000625a3754423978a60c9317c58a424e3D;
-
-    uint8 internal constant BAL_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x2516E7B3F76294e03C42AA4c5b5b4DCE9C436fB8
-    address internal constant BAL_A_TOKEN =
-        0x2516E7B3F76294e03C42AA4c5b5b4DCE9C436fB8;
-
-    // https://etherscan.io/address/0x3D3efceb4Ff0966D34d9545D3A2fa2dcdBf451f2
-    address internal constant BAL_V_TOKEN =
-        0x3D3efceb4Ff0966D34d9545D3A2fa2dcdBf451f2;
-
-    // https://etherscan.io/address/0xB368d45aaAa07ee2c6275Cb320D140b22dE43CDD
-    address internal constant BAL_S_TOKEN =
-        0xB368d45aaAa07ee2c6275Cb320D140b22dE43CDD;
-
-    // https://etherscan.io/address/0xdF2917806E30300537aEB49A7663062F4d1F2b5F
-    address internal constant BAL_ORACLE =
-        0xdF2917806E30300537aEB49A7663062F4d1F2b5F;
-
-    // https://etherscan.io/address/0xd9d85499449f26d2A2c240defd75314f23920089
-    address internal constant BAL_INTEREST_RATE_STRATEGY =
-        0xd9d85499449f26d2A2c240defd75314f23920089;
-
-    // https://etherscan.io/address/0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984
-    address internal constant UNI_UNDERLYING =
-        0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;
-
-    uint8 internal constant UNI_DECIMALS = 18;
-
-    // https://etherscan.io/address/0xF6D2224916DDFbbab6e6bd0D1B7034f4Ae0CaB18
-    address internal constant UNI_A_TOKEN =
-        0xF6D2224916DDFbbab6e6bd0D1B7034f4Ae0CaB18;
-
-    // https://etherscan.io/address/0xF64178Ebd2E2719F2B1233bCb5Ef6DB4bCc4d09a
-    address internal constant UNI_V_TOKEN =
-        0xF64178Ebd2E2719F2B1233bCb5Ef6DB4bCc4d09a;
-
-    // https://etherscan.io/address/0x2FEc76324A0463c46f32e74A86D1cf94C02158DC
-    address internal constant UNI_S_TOKEN =
-        0x2FEc76324A0463c46f32e74A86D1cf94C02158DC;
-
-    // https://etherscan.io/address/0x553303d460EE0afB37EdFf9bE42922D8FF63220e
-    address internal constant UNI_ORACLE =
-        0x553303d460EE0afB37EdFf9bE42922D8FF63220e;
-
-    // https://etherscan.io/address/0x27eFE5db315b71753b2a38ED3d5dd7E9362ba93F
-    address internal constant UNI_INTEREST_RATE_STRATEGY =
-        0x27eFE5db315b71753b2a38ED3d5dd7E9362ba93F;
-
-    // https://etherscan.io/address/0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32
-    address internal constant LDO_UNDERLYING =
-        0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32;
-
-    uint8 internal constant LDO_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x9A44fd41566876A39655f74971a3A6eA0a17a454
-    address internal constant LDO_A_TOKEN =
-        0x9A44fd41566876A39655f74971a3A6eA0a17a454;
-
-    // https://etherscan.io/address/0xc30808705C01289A3D306ca9CAB081Ba9114eC82
-    address internal constant LDO_V_TOKEN =
-        0xc30808705C01289A3D306ca9CAB081Ba9114eC82;
-
-    // https://etherscan.io/address/0xa0a5bF5781Aeb548db9d4226363B9e89287C5FD2
-    address internal constant LDO_S_TOKEN =
-        0xa0a5bF5781Aeb548db9d4226363B9e89287C5FD2;
-
-    // https://etherscan.io/address/0xb01e6C9af83879B8e06a092f0DD94309c0D497E4
-    address internal constant LDO_ORACLE =
-        0xb01e6C9af83879B8e06a092f0DD94309c0D497E4;
-
-    // https://etherscan.io/address/0x27eFE5db315b71753b2a38ED3d5dd7E9362ba93F
-    address internal constant LDO_INTEREST_RATE_STRATEGY =
-        0x27eFE5db315b71753b2a38ED3d5dd7E9362ba93F;
-
-    // https://etherscan.io/address/0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72
-    address internal constant ENS_UNDERLYING =
-        0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72;
-
-    uint8 internal constant ENS_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x545bD6c032eFdde65A377A6719DEF2796C8E0f2e
-    address internal constant ENS_A_TOKEN =
-        0x545bD6c032eFdde65A377A6719DEF2796C8E0f2e;
-
-    // https://etherscan.io/address/0xd180D7fdD4092f07428eFE801E17BC03576b3192
-    address internal constant ENS_V_TOKEN =
-        0xd180D7fdD4092f07428eFE801E17BC03576b3192;
-
-    // https://etherscan.io/address/0x7617d02E311CdE347A0cb45BB7DF2926BBaf5347
-    address internal constant ENS_S_TOKEN =
-        0x7617d02E311CdE347A0cb45BB7DF2926BBaf5347;
-
-    // https://etherscan.io/address/0x5C00128d4d1c2F4f652C267d7bcdD7aC99C16E16
-    address internal constant ENS_ORACLE =
-        0x5C00128d4d1c2F4f652C267d7bcdD7aC99C16E16;
-
-    // https://etherscan.io/address/0xf6733B9842883BFE0e0a940eA2F572676af31bde
-    address internal constant ENS_INTEREST_RATE_STRATEGY =
-        0xf6733B9842883BFE0e0a940eA2F572676af31bde;
-
-    // https://etherscan.io/address/0x111111111117dC0aa78b770fA6A738034120C302
-    address internal constant ONE_INCH_UNDERLYING =
-        0x111111111117dC0aa78b770fA6A738034120C302;
-
-    uint8 internal constant ONE_INCH_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x71Aef7b30728b9BB371578f36c5A1f1502a5723e
-    address internal constant ONE_INCH_A_TOKEN =
-        0x71Aef7b30728b9BB371578f36c5A1f1502a5723e;
-
-    // https://etherscan.io/address/0xA38fCa8c6Bf9BdA52E76EB78f08CaA3BE7c5A970
-    address internal constant ONE_INCH_V_TOKEN =
-        0xA38fCa8c6Bf9BdA52E76EB78f08CaA3BE7c5A970;
-
-    // https://etherscan.io/address/0x4b62bFAff61AB3985798e5202D2d167F567D0BCD
-    address internal constant ONE_INCH_S_TOKEN =
-        0x4b62bFAff61AB3985798e5202D2d167F567D0BCD;
-
-    // https://etherscan.io/address/0xc929ad75B72593967DE83E7F7Cda0493458261D9
-    address internal constant ONE_INCH_ORACLE =
-        0xc929ad75B72593967DE83E7F7Cda0493458261D9;
-
-    // https://etherscan.io/address/0xf6733B9842883BFE0e0a940eA2F572676af31bde
-    address internal constant ONE_INCH_INTEREST_RATE_STRATEGY =
-        0xf6733B9842883BFE0e0a940eA2F572676af31bde;
-
-    // https://etherscan.io/address/0x853d955aCEf822Db058eb8505911ED77F175b99e
-    address internal constant FRAX_UNDERLYING =
-        0x853d955aCEf822Db058eb8505911ED77F175b99e;
-
-    uint8 internal constant FRAX_DECIMALS = 18;
-
-    // https://etherscan.io/address/0xd4e245848d6E1220DBE62e155d89fa327E43CB06
-    address internal constant FRAX_A_TOKEN =
-        0xd4e245848d6E1220DBE62e155d89fa327E43CB06;
-
-    // https://etherscan.io/address/0x88B8358F5BC87c2D7E116cCA5b65A9eEb2c5EA3F
-    address internal constant FRAX_V_TOKEN =
-        0x88B8358F5BC87c2D7E116cCA5b65A9eEb2c5EA3F;
-
-    // https://etherscan.io/address/0x219640546c0DFDDCb9ab3bcdA89B324e0a376367
-    address internal constant FRAX_S_TOKEN =
-        0x219640546c0DFDDCb9ab3bcdA89B324e0a376367;
-
-    // https://etherscan.io/address/0x45D270263BBee500CF8adcf2AbC0aC227097b036
-    address internal constant FRAX_ORACLE =
-        0x45D270263BBee500CF8adcf2AbC0aC227097b036;
-
-    // https://etherscan.io/address/0x7448ABeD12d8538efC115af4a417e3d1367180fc
-    address internal constant FRAX_INTEREST_RATE_STRATEGY =
-        0x7448ABeD12d8538efC115af4a417e3d1367180fc;
-
-    // https://etherscan.io/address/0xEE66abD4D0f9908A48E08AE354B0f425De3e237E
-    address internal constant FRAX_STATA_TOKEN =
-        0xEE66abD4D0f9908A48E08AE354B0f425De3e237E;
-
-    // https://etherscan.io/address/0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f
-    address internal constant GHO_UNDERLYING =
-        0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f;
-
-    uint8 internal constant GHO_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x00907f9921424583e7ffBfEdf84F92B7B2Be4977
-    address internal constant GHO_A_TOKEN =
-        0x00907f9921424583e7ffBfEdf84F92B7B2Be4977;
-
-    // https://etherscan.io/address/0x786dBff3f1292ae8F92ea68Cf93c30b34B1ed04B
-    address internal constant GHO_V_TOKEN =
-        0x786dBff3f1292ae8F92ea68Cf93c30b34B1ed04B;
-
-    // https://etherscan.io/address/0x3f3DF7266dA30102344A813F1a3D07f5F041B5AC
-    address internal constant GHO_S_TOKEN =
-        0x3f3DF7266dA30102344A813F1a3D07f5F041B5AC;
-
-    // https://etherscan.io/address/0xD110cac5d8682A3b045D5524a9903E031d70FCCd
-    address internal constant GHO_ORACLE =
-        0xD110cac5d8682A3b045D5524a9903E031d70FCCd;
-
-    // https://etherscan.io/address/0x7123138CB4891E9dA927492ce29c8a2eC4aB433A
-    address internal constant GHO_INTEREST_RATE_STRATEGY =
-        0x7123138CB4891E9dA927492ce29c8a2eC4aB433A;
-
-    // https://etherscan.io/address/0xD33526068D116cE69F19A9ee46F0bd304F21A51f
-    address internal constant RPL_UNDERLYING =
-        0xD33526068D116cE69F19A9ee46F0bd304F21A51f;
-
-    uint8 internal constant RPL_DECIMALS = 18;
-
-    // https://etherscan.io/address/0xB76CF92076adBF1D9C39294FA8e7A67579FDe357
-    address internal constant RPL_A_TOKEN =
-        0xB76CF92076adBF1D9C39294FA8e7A67579FDe357;
-
-    // https://etherscan.io/address/0x8988ECA19D502fd8b9CCd03fA3bD20a6f599bc2A
-    address internal constant RPL_V_TOKEN =
-        0x8988ECA19D502fd8b9CCd03fA3bD20a6f599bc2A;
-
-    // https://etherscan.io/address/0x41e330fd8F7eA31E2e8F02cC0C9392D1403597B4
-    address internal constant RPL_S_TOKEN =
-        0x41e330fd8F7eA31E2e8F02cC0C9392D1403597B4;
-
-    // https://etherscan.io/address/0x4E155eD98aFE9034b7A5962f6C84c86d869daA9d
-    address internal constant RPL_ORACLE =
-        0x4E155eD98aFE9034b7A5962f6C84c86d869daA9d;
-
-    // https://etherscan.io/address/0xD87974E8ED49AB16d5053ba793F4e17078Be0426
-    address internal constant RPL_INTEREST_RATE_STRATEGY =
-        0xD87974E8ED49AB16d5053ba793F4e17078Be0426;
-
-    // https://etherscan.io/address/0x83F20F44975D03b1b09e64809B757c47f942BEeA
-    address internal constant sDAI_UNDERLYING =
-        0x83F20F44975D03b1b09e64809B757c47f942BEeA;
-
-    uint8 internal constant sDAI_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x4C612E3B15b96Ff9A6faED838F8d07d479a8dD4c
-    address internal constant sDAI_A_TOKEN =
-        0x4C612E3B15b96Ff9A6faED838F8d07d479a8dD4c;
-
-    // https://etherscan.io/address/0x8Db9D35e117d8b93C6Ca9b644b25BaD5d9908141
-    address internal constant sDAI_V_TOKEN =
-        0x8Db9D35e117d8b93C6Ca9b644b25BaD5d9908141;
-
-    // https://etherscan.io/address/0x48Bc45f084988bC01933EA93EeFfEBC0416534f6
-    address internal constant sDAI_S_TOKEN =
-        0x48Bc45f084988bC01933EA93EeFfEBC0416534f6;
-
-    // https://etherscan.io/address/0x29081f7aB5a644716EfcDC10D5c926c5fEe9F72B
-    address internal constant sDAI_ORACLE =
-        0x29081f7aB5a644716EfcDC10D5c926c5fEe9F72B;
-
-    // https://etherscan.io/address/0xdef8F50155A6cf21181E29E400E8CffAE2d50968
-    address internal constant sDAI_INTEREST_RATE_STRATEGY =
-        0xdef8F50155A6cf21181E29E400E8CffAE2d50968;
-
-    // https://etherscan.io/address/0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6
-    address internal constant STG_UNDERLYING =
-        0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6;
-
-    uint8 internal constant STG_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x1bA9843bD4327c6c77011406dE5fA8749F7E3479
-    address internal constant STG_A_TOKEN =
-        0x1bA9843bD4327c6c77011406dE5fA8749F7E3479;
-
-    // https://etherscan.io/address/0x655568bDd6168325EC7e58Bf39b21A856F906Dc2
-    address internal constant STG_V_TOKEN =
-        0x655568bDd6168325EC7e58Bf39b21A856F906Dc2;
-
-    // https://etherscan.io/address/0xc3115D0660b93AeF10F298886ae22E3Dd477E482
-    address internal constant STG_S_TOKEN =
-        0xc3115D0660b93AeF10F298886ae22E3Dd477E482;
-
-    // https://etherscan.io/address/0x7A9f34a0Aa917D438e9b6E630067062B7F8f6f3d
-    address internal constant STG_ORACLE =
-        0x7A9f34a0Aa917D438e9b6E630067062B7F8f6f3d;
-
-    // https://etherscan.io/address/0x27eFE5db315b71753b2a38ED3d5dd7E9362ba93F
-    address internal constant STG_INTEREST_RATE_STRATEGY =
-        0x27eFE5db315b71753b2a38ED3d5dd7E9362ba93F;
-
-    // https://etherscan.io/address/0xdeFA4e8a7bcBA345F687a2f1456F5Edd9CE97202
-    address internal constant KNC_UNDERLYING =
-        0xdeFA4e8a7bcBA345F687a2f1456F5Edd9CE97202;
-
-    uint8 internal constant KNC_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x5b502e3796385E1e9755d7043B9C945C3aCCeC9C
-    address internal constant KNC_A_TOKEN =
-        0x5b502e3796385E1e9755d7043B9C945C3aCCeC9C;
-
-    // https://etherscan.io/address/0x253127Ffc04981cEA8932F406710661c2f2c3fD2
-    address internal constant KNC_V_TOKEN =
-        0x253127Ffc04981cEA8932F406710661c2f2c3fD2;
-
-    // https://etherscan.io/address/0xdfEE0C9eA1309cB9611F33972E72a72166fcF548
-    address internal constant KNC_S_TOKEN =
-        0xdfEE0C9eA1309cB9611F33972E72a72166fcF548;
-
-    // https://etherscan.io/address/0xf8fF43E991A81e6eC886a3D281A2C6cC19aE70Fc
-    address internal constant KNC_ORACLE =
-        0xf8fF43E991A81e6eC886a3D281A2C6cC19aE70Fc;
-
-    // https://etherscan.io/address/0xf6733B9842883BFE0e0a940eA2F572676af31bde
-    address internal constant KNC_INTEREST_RATE_STRATEGY =
-        0xf6733B9842883BFE0e0a940eA2F572676af31bde;
-
-    // https://etherscan.io/address/0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0
-    address internal constant FXS_UNDERLYING =
-        0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0;
-
-    uint8 internal constant FXS_DECIMALS = 18;
-
-    // https://etherscan.io/address/0x82F9c5ad306BBa1AD0De49bB5FA6F01bf61085ef
-    address internal constant FXS_A_TOKEN =
-        0x82F9c5ad306BBa1AD0De49bB5FA6F01bf61085ef;
-
-    // https://etherscan.io/address/0x68e9f0aD4e6f8F5DB70F6923d4d6d5b225B83b16
-    address internal constant FXS_V_TOKEN =
-        0x68e9f0aD4e6f8F5DB70F6923d4d6d5b225B83b16;
-
-    // https://etherscan.io/address/0x61dFd349140C239d3B61fEe203Efc811b518a317
-    address internal constant FXS_S_TOKEN =
-        0x61dFd349140C239d3B61fEe203Efc811b518a317;
-
-    // https://etherscan.io/address/0x6Ebc52C8C1089be9eB3945C4350B68B8E4C2233f
-    address internal constant FXS_ORACLE =
-        0x6Ebc52C8C1089be9eB3945C4350B68B8E4C2233f;
-
-    // https://etherscan.io/address/0xf6733B9842883BFE0e0a940eA2F572676af31bde
-    address internal constant FXS_INTEREST_RATE_STRATEGY =
-        0xf6733B9842883BFE0e0a940eA2F572676af31bde;
-
-    // https://etherscan.io/address/0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E
-    address internal constant crvUSD_UNDERLYING =
-        0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E;
-
-    uint8 internal constant crvUSD_DECIMALS = 18;
-
-    // https://etherscan.io/address/0xb82fa9f31612989525992FCfBB09AB22Eff5c85A
-    address internal constant crvUSD_A_TOKEN =
-        0xb82fa9f31612989525992FCfBB09AB22Eff5c85A;
-
-    // https://etherscan.io/address/0x028f7886F3e937f8479efaD64f31B3fE1119857a
-    address internal constant crvUSD_V_TOKEN =
-        0x028f7886F3e937f8479efaD64f31B3fE1119857a;
-
-    // https://etherscan.io/address/0xb55C604075D79486b8A329c396Fc711Be54B5330
-    address internal constant crvUSD_S_TOKEN =
-        0xb55C604075D79486b8A329c396Fc711Be54B5330;
-
-    // https://etherscan.io/address/0x02AeE5b225366302339748951E1a924617b8814F
-    address internal constant crvUSD_ORACLE =
-        0x02AeE5b225366302339748951E1a924617b8814F;
-
-    // https://etherscan.io/address/0xaEc90D2516c79F8Ae7165574a41EC4dF2631b36f
-    address internal constant crvUSD_INTEREST_RATE_STRATEGY =
-        0xaEc90D2516c79F8Ae7165574a41EC4dF2631b36f;
-
-    // https://etherscan.io/address/0x848107491E029AFDe0AC543779c7790382f15929
-    address internal constant crvUSD_STATA_TOKEN =
-        0x848107491E029AFDe0AC543779c7790382f15929;
-
-    // https://etherscan.io/address/0x6c3ea9036406852006290770BEdFcAbA0e23A0e8
-    address internal constant PYUSD_UNDERLYING =
-        0x6c3ea9036406852006290770BEdFcAbA0e23A0e8;
-
-    uint8 internal constant PYUSD_DECIMALS = 6;
-
-    // https://etherscan.io/address/0x0C0d01AbF3e6aDfcA0989eBbA9d6e85dD58EaB1E
-    address internal constant PYUSD_A_TOKEN =
-        0x0C0d01AbF3e6aDfcA0989eBbA9d6e85dD58EaB1E;
-
-    // https://etherscan.io/address/0x57B67e4DE077085Fd0AF2174e9c14871BE664546
-    address internal constant PYUSD_V_TOKEN =
-        0x57B67e4DE077085Fd0AF2174e9c14871BE664546;
-
-    // https://etherscan.io/address/0x5B393DB4c72B1Bd82CE2834F6485d61b137Bc7aC
-    address internal constant PYUSD_S_TOKEN =
-        0x5B393DB4c72B1Bd82CE2834F6485d61b137Bc7aC;
-
-    // https://etherscan.io/address/0x150bAe7Ce224555D39AfdBc6Cb4B8204E594E022
-    address internal constant PYUSD_ORACLE =
-        0x150bAe7Ce224555D39AfdBc6Cb4B8204E594E022;
-
-    // https://etherscan.io/address/0xaEc90D2516c79F8Ae7165574a41EC4dF2631b36f
-    address internal constant PYUSD_INTEREST_RATE_STRATEGY =
-        0xaEc90D2516c79F8Ae7165574a41EC4dF2631b36f;
-
-    // https://etherscan.io/address/0x00F2a835758B33f3aC53516Ebd69f3dc77B0D152
-    address internal constant PYUSD_STATA_TOKEN =
-        0x00F2a835758B33f3aC53516Ebd69f3dc77B0D152;
-
-    // https://etherscan.io/address/0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee
-    address internal constant weETH_UNDERLYING =
-        0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee;
-
-    uint8 internal constant weETH_DECIMALS = 18;
-
-    // https://etherscan.io/address/0xBdfa7b7893081B35Fb54027489e2Bc7A38275129
-    address internal constant weETH_A_TOKEN =
-        0xBdfa7b7893081B35Fb54027489e2Bc7A38275129;
-
-    // https://etherscan.io/address/0x77ad9BF13a52517AD698D65913e8D381300c8Bf3
-    address internal constant weETH_V_TOKEN =
-        0x77ad9BF13a52517AD698D65913e8D381300c8Bf3;
-
-    // https://etherscan.io/address/0xBad6eF8e76E26F39e985474aD0974FDcabF85d37
-    address internal constant weETH_S_TOKEN =
-        0xBad6eF8e76E26F39e985474aD0974FDcabF85d37;
-
-    // https://etherscan.io/address/0xf112aF6F0A332B815fbEf3Ff932c057E570b62d3
-    address internal constant weETH_ORACLE =
-        0xf112aF6F0A332B815fbEf3Ff932c057E570b62d3;
-
-    // https://etherscan.io/address/0x48AF11111764E710fcDcE2750db848C63edab57B
-    address internal constant weETH_INTEREST_RATE_STRATEGY =
-        0x48AF11111764E710fcDcE2750db848C63edab57B;
-}
-
-library AaveV3EthereumEModes {
-    uint8 internal constant NONE = 0;
-
-    uint8 internal constant ETH_CORRELATED = 1;
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/AggregatorInterface.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/AggregatorInterface.sol
deleted file mode 100644
index 3a6518d..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/AggregatorInterface.sol
+++ /dev/null
@@ -1,27 +0,0 @@
-// SPDX-License-Identifier: MIT
-// Chainlink Contracts v0.8
-pragma solidity ^0.8.0;
-
-interface AggregatorInterface {
-    function latestAnswer() external view returns (int256);
-
-    function latestTimestamp() external view returns (uint256);
-
-    function latestRound() external view returns (uint256);
-
-    function getAnswer(uint256 roundId) external view returns (int256);
-
-    function getTimestamp(uint256 roundId) external view returns (uint256);
-
-    event AnswerUpdated(
-        int256 indexed current,
-        uint256 indexed roundId,
-        uint256 updatedAt
-    );
-
-    event NewRound(
-        uint256 indexed roundId,
-        address indexed startedBy,
-        uint256 startedAt
-    );
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/BorrowLogic.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/BorrowLogic.sol
index e7efddd..1b1a18b 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/BorrowLogic.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/BorrowLogic.sol
@@ -4,12 +4,10 @@ pragma solidity ^0.8.10;
 import {GPv2SafeERC20} from "../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol";
 import {SafeCast} from "../../../dependencies/openzeppelin/contracts/SafeCast.sol";
 import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
-import {IStableDebtToken} from "../../../interfaces/IStableDebtToken.sol";
 import {IVariableDebtToken} from "../../../interfaces/IVariableDebtToken.sol";
 import {IAToken} from "../../../interfaces/IAToken.sol";
 import {UserConfiguration} from "../configuration/UserConfiguration.sol";
 import {ReserveConfiguration} from "../configuration/ReserveConfiguration.sol";
-import {Helpers} from "../helpers/Helpers.sol";
 import {DataTypes} from "../types/DataTypes.sol";
 import {ValidationLogic} from "./ValidationLogic.sol";
 import {ReserveLogic} from "./ReserveLogic.sol";
@@ -45,15 +43,6 @@ library BorrowLogic {
         uint256 amount,
         bool useATokens
     );
-    event RebalanceStableBorrowRate(
-        address indexed reserve,
-        address indexed user
-    );
-    event SwapBorrowRateMode(
-        address indexed reserve,
-        address indexed user,
-        DataTypes.InterestRateMode interestRateMode
-    );
     event IsolationModeTotalDebtUpdated(
         address indexed asset,
         uint256 totalDebt
@@ -103,7 +92,6 @@ library BorrowLogic {
                 userAddress: params.onBehalfOf,
                 amount: params.amount,
                 interestRateMode: params.interestRateMode,
-                maxStableLoanPercent: params.maxStableRateBorrowSizePercent,
                 reservesCount: params.reservesCount,
                 oracle: params.oracle,
                 userEModeCategory: params.userEModeCategory,
@@ -114,33 +102,17 @@ library BorrowLogic {
             })
         );
 
-        uint256 currentStableRate = 0;
         bool isFirstBorrowing = false;
 
-        if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {
-            currentStableRate = reserve.currentStableBorrowRate;
-
-            (
-                isFirstBorrowing,
-                reserveCache.nextTotalStableDebt,
-                reserveCache.nextAvgStableBorrowRate
-            ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).mint(
-                params.user,
-                params.onBehalfOf,
-                params.amount,
-                currentStableRate
-            );
-        } else {
-            (
-                isFirstBorrowing,
-                reserveCache.nextScaledVariableDebt
-            ) = IVariableDebtToken(reserveCache.variableDebtTokenAddress).mint(
-                params.user,
-                params.onBehalfOf,
-                params.amount,
-                reserveCache.nextVariableBorrowIndex
-            );
-        }
+        (
+            isFirstBorrowing,
+            reserveCache.nextScaledVariableDebt
+        ) = IVariableDebtToken(reserveCache.variableDebtTokenAddress).mint(
+            params.user,
+            params.onBehalfOf,
+            params.amount,
+            reserveCache.nextVariableBorrowIndex
+        );
 
         if (isFirstBorrowing) {
             userConfig.setBorrowing(reserve.id, true);
@@ -179,10 +151,8 @@ library BorrowLogic {
             params.user,
             params.onBehalfOf,
             params.amount,
-            params.interestRateMode,
-            params.interestRateMode == DataTypes.InterestRateMode.STABLE
-                ? currentStableRate
-                : reserve.currentVariableBorrowRate,
+            DataTypes.InterestRateMode.VARIABLE,
+            reserve.currentVariableBorrowRate,
             params.referralCode
         );
     }
@@ -208,24 +178,18 @@ library BorrowLogic {
         DataTypes.ReserveCache memory reserveCache = reserve.cache();
         reserve.updateState(reserveCache);
 
-        (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(
-            params.onBehalfOf,
-            reserveCache
-        );
+        uint256 variableDebt = IERC20(reserveCache.variableDebtTokenAddress)
+            .balanceOf(params.onBehalfOf);
 
         ValidationLogic.validateRepay(
             reserveCache,
             params.amount,
             params.interestRateMode,
             params.onBehalfOf,
-            stableDebt,
             variableDebt
         );
 
-        uint256 paybackAmount = params.interestRateMode ==
-            DataTypes.InterestRateMode.STABLE
-            ? stableDebt
-            : variableDebt;
+        uint256 paybackAmount = variableDebt;
 
         // Allows a user to repay with aTokens without leaving dust from interest.
         if (params.useATokens && params.amount == type(uint256).max) {
@@ -238,23 +202,13 @@ library BorrowLogic {
             paybackAmount = params.amount;
         }
 
-        if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {
-            (
-                reserveCache.nextTotalStableDebt,
-                reserveCache.nextAvgStableBorrowRate
-            ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).burn(
+        reserveCache.nextScaledVariableDebt = IVariableDebtToken(
+            reserveCache.variableDebtTokenAddress
+        ).burn(
                 params.onBehalfOf,
-                paybackAmount
+                paybackAmount,
+                reserveCache.nextVariableBorrowIndex
             );
-        } else {
-            reserveCache.nextScaledVariableDebt = IVariableDebtToken(
-                reserveCache.variableDebtTokenAddress
-            ).burn(
-                    params.onBehalfOf,
-                    paybackAmount,
-                    reserveCache.nextVariableBorrowIndex
-                );
-        }
 
         reserve.updateInterestRatesAndVirtualBalance(
             reserveCache,
@@ -263,7 +217,7 @@ library BorrowLogic {
             0
         );
 
-        if (stableDebt + variableDebt - paybackAmount == 0) {
+        if (variableDebt - paybackAmount == 0) {
             userConfig.setBorrowing(reserve.id, false);
         }
 
@@ -314,123 +268,4 @@ library BorrowLogic {
 
         return paybackAmount;
     }
-
-    /**
-     * @notice Implements the rebalance stable borrow rate feature. In case of liquidity crunches on the protocol, stable
-     * rate borrows might need to be rebalanced to bring back equilibrium between the borrow and supply APYs.
-     * @dev The rules that define if a position can be rebalanced are implemented in `ValidationLogic.validateRebalanceStableBorrowRate()`
-     * @dev Emits the `RebalanceStableBorrowRate()` event
-     * @param reserve The state of the reserve of the asset being repaid
-     * @param asset The asset of the position being rebalanced
-     * @param user The user being rebalanced
-     */
-    function executeRebalanceStableBorrowRate(
-        DataTypes.ReserveData storage reserve,
-        address asset,
-        address user
-    ) external {
-        DataTypes.ReserveCache memory reserveCache = reserve.cache();
-        reserve.updateState(reserveCache);
-
-        ValidationLogic.validateRebalanceStableBorrowRate(
-            reserve,
-            reserveCache,
-            asset
-        );
-
-        IStableDebtToken stableDebtToken = IStableDebtToken(
-            reserveCache.stableDebtTokenAddress
-        );
-        uint256 stableDebt = IERC20(address(stableDebtToken)).balanceOf(user);
-
-        stableDebtToken.burn(user, stableDebt);
-
-        (
-            ,
-            reserveCache.nextTotalStableDebt,
-            reserveCache.nextAvgStableBorrowRate
-        ) = stableDebtToken.mint(
-            user,
-            user,
-            stableDebt,
-            reserve.currentStableBorrowRate
-        );
-
-        reserve.updateInterestRatesAndVirtualBalance(reserveCache, asset, 0, 0);
-
-        emit RebalanceStableBorrowRate(asset, user);
-    }
-
-    /**
-     * @notice Implements the swap borrow rate feature. Borrowers can swap from variable to stable positions at any time.
-     * @dev Emits the `Swap()` event
-     * @param reserve The of the reserve of the asset being repaid
-     * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets
-     * @param asset The asset of the position being swapped
-     * @param user The user whose debt position is being swapped
-     * @param interestRateMode The current interest rate mode of the position being swapped
-     */
-    function executeSwapBorrowRateMode(
-        DataTypes.ReserveData storage reserve,
-        DataTypes.UserConfigurationMap storage userConfig,
-        address asset,
-        address user,
-        DataTypes.InterestRateMode interestRateMode
-    ) external {
-        DataTypes.ReserveCache memory reserveCache = reserve.cache();
-
-        reserve.updateState(reserveCache);
-
-        (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(
-            user,
-            reserveCache
-        );
-
-        ValidationLogic.validateSwapRateMode(
-            reserve,
-            reserveCache,
-            userConfig,
-            stableDebt,
-            variableDebt,
-            interestRateMode
-        );
-
-        if (interestRateMode == DataTypes.InterestRateMode.STABLE) {
-            (
-                reserveCache.nextTotalStableDebt,
-                reserveCache.nextAvgStableBorrowRate
-            ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).burn(
-                user,
-                stableDebt
-            );
-
-            (, reserveCache.nextScaledVariableDebt) = IVariableDebtToken(
-                reserveCache.variableDebtTokenAddress
-            ).mint(
-                    user,
-                    user,
-                    stableDebt,
-                    reserveCache.nextVariableBorrowIndex
-                );
-        } else {
-            reserveCache.nextScaledVariableDebt = IVariableDebtToken(
-                reserveCache.variableDebtTokenAddress
-            ).burn(user, variableDebt, reserveCache.nextVariableBorrowIndex);
-
-            (
-                ,
-                reserveCache.nextTotalStableDebt,
-                reserveCache.nextAvgStableBorrowRate
-            ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).mint(
-                user,
-                user,
-                variableDebt,
-                reserve.currentStableBorrowRate
-            );
-        }
-
-        reserve.updateInterestRatesAndVirtualBalance(reserveCache, asset, 0, 0);
-
-        emit SwapBorrowRateMode(asset, user, interestRateMode);
-    }
 }
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ConfiguratorInputTypes.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ConfiguratorInputTypes.sol
deleted file mode 100644
index e27393e..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ConfiguratorInputTypes.sol
+++ /dev/null
@@ -1,41 +0,0 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity ^0.8.0;
-
-library ConfiguratorInputTypes {
-    struct InitReserveInput {
-        address aTokenImpl;
-        address stableDebtTokenImpl;
-        address variableDebtTokenImpl;
-        uint8 underlyingAssetDecimals;
-        address interestRateStrategyAddress;
-        address underlyingAsset;
-        address treasury;
-        address incentivesController;
-        string aTokenName;
-        string aTokenSymbol;
-        string variableDebtTokenName;
-        string variableDebtTokenSymbol;
-        string stableDebtTokenName;
-        string stableDebtTokenSymbol;
-        bytes params;
-    }
-
-    struct UpdateATokenInput {
-        address asset;
-        address treasury;
-        address incentivesController;
-        string name;
-        string symbol;
-        address implementation;
-        bytes params;
-    }
-
-    struct UpdateDebtTokenInput {
-        address asset;
-        address incentivesController;
-        string name;
-        string symbol;
-        address implementation;
-        bytes params;
-    }
-}
diff --git a/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/CustomInitialize.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/CustomInitialize.sol
new file mode 100644
index 0000000..8b16d14
--- /dev/null
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/CustomInitialize.sol
@@ -0,0 +1,31 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+import {DataTypes} from "aave-v3-origin/contracts/protocol/pool/Pool.sol";
+import {IERC20} from "aave-v3-origin/contracts/dependencies/openzeppelin/contracts/IERC20.sol";
+import {SafeCast} from "aave-v3-origin/contracts/dependencies/openzeppelin/contracts/SafeCast.sol";
+import {WadRayMath} from "aave-v3-origin/contracts/protocol/libraries/math/WadRayMath.sol";
+import {MathUtils} from "aave-v3-origin/contracts/protocol/libraries/math/MathUtils.sol";
+import {ReserveConfiguration} from "aave-v3-origin/contracts/protocol/libraries/configuration/ReserveConfiguration.sol";
+import {ReserveLogic} from "aave-v3-origin/contracts/protocol/libraries/logic/ReserveLogic.sol";
+
+library CustomInitialize {
+    using ReserveLogic for DataTypes.ReserveCache;
+    using ReserveLogic for DataTypes.ReserveData;
+    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
+
+    function initialize(
+        uint256 reservesCount,
+        mapping(uint256 => address) storage _reservesList,
+        mapping(address => DataTypes.ReserveData) storage _reserves
+    ) internal {
+        for (uint256 i = 0; i < reservesCount; i++) {
+            address currentReserveAddress = _reservesList[i];
+            DataTypes.ReserveData storage currentReserve = _reserves[
+                currentReserveAddress
+            ];
+            currentReserve.__deprecatedStableDebtTokenAddress = address(0);
+            require(currentReserve.__deprecatedStableBorrowRate == 0);
+        }
+    }
+}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/DataTypes.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/DataTypes.sol
index e89a752..3eb4af3 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/DataTypes.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/DataTypes.sol
@@ -1,8 +1,12 @@
-// SPDX-License-Identifier: BUSL-1.1
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 library DataTypes {
-    struct ReserveData {
+    /**
+     * This exists specifically to maintain the `getReserveData()` interface, since the new, internal
+     * `ReserveData` struct includes the reserve's `virtualUnderlyingBalance`.
+     */
+    struct ReserveDataLegacy {
         //stores the reserve configuration
         ReserveConfigurationMap configuration;
         //the liquidity index. Expressed in ray
@@ -13,7 +17,7 @@ library DataTypes {
         uint128 variableBorrowIndex;
         //the current variable borrow rate. Expressed in ray
         uint128 currentVariableBorrowRate;
-        //the current stable borrow rate. Expressed in ray
+        // DEPRECATED on v3.2.0
         uint128 currentStableBorrowRate;
         //timestamp of last update
         uint40 lastUpdateTimestamp;
@@ -21,7 +25,7 @@ library DataTypes {
         uint16 id;
         //aToken address
         address aTokenAddress;
-        //stableDebtToken address
+        // DEPRECATED on v3.2.0
         address stableDebtTokenAddress;
         //variableDebtToken address
         address variableDebtTokenAddress;
@@ -35,6 +39,43 @@ library DataTypes {
         uint128 isolationModeTotalDebt;
     }
 
+    struct ReserveData {
+        //stores the reserve configuration
+        ReserveConfigurationMap configuration;
+        //the liquidity index. Expressed in ray
+        uint128 liquidityIndex;
+        //the current supply rate. Expressed in ray
+        uint128 currentLiquidityRate;
+        //variable borrow index. Expressed in ray
+        uint128 variableBorrowIndex;
+        //the current variable borrow rate. Expressed in ray
+        uint128 currentVariableBorrowRate;
+        // DEPRECATED on v3.2.0
+        uint128 __deprecatedStableBorrowRate;
+        //timestamp of last update
+        uint40 lastUpdateTimestamp;
+        //the id of the reserve. Represents the position in the list of the active reserves
+        uint16 id;
+        //timestamp until when liquidations are not allowed on the reserve, if set to past liquidations will be allowed
+        uint40 liquidationGracePeriodUntil;
+        //aToken address
+        address aTokenAddress;
+        // DEPRECATED on v3.2.0
+        address __deprecatedStableDebtTokenAddress;
+        //variableDebtToken address
+        address variableDebtTokenAddress;
+        //address of the interest rate strategy
+        address interestRateStrategyAddress;
+        //the current treasury balance, scaled
+        uint128 accruedToTreasury;
+        //the outstanding unbacked aTokens minted through the bridging feature
+        uint128 unbacked;
+        //the outstanding debt borrowed against this asset in isolation mode
+        uint128 isolationModeTotalDebt;
+        //the amount of underlying accounted for by the protocol
+        uint128 virtualUnderlyingBalance;
+    }
+
     struct ReserveConfigurationMap {
         //bit 0-15: LTV
         //bit 16-31: Liq. threshold
@@ -43,19 +84,20 @@ library DataTypes {
         //bit 56: reserve is active
         //bit 57: reserve is frozen
         //bit 58: borrowing is enabled
-        //bit 59: stable rate borrowing enabled
+        //bit 59: DEPRECATED: stable rate borrowing enabled
         //bit 60: asset is paused
         //bit 61: borrowing in isolation mode is enabled
         //bit 62: siloed borrowing enabled
         //bit 63: flashloaning enabled
         //bit 64-79: reserve factor
-        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap
-        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap
-        //bit 152-167 liquidation protocol fee
-        //bit 168-175 eMode category
-        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled
-        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
-        //bit 252-255 unused
+        //bit 80-115: borrow cap in whole tokens, borrowCap == 0 => no cap
+        //bit 116-151: supply cap in whole tokens, supplyCap == 0 => no cap
+        //bit 152-167: liquidation protocol fee
+        //bit 168-175: DEPRECATED: eMode category
+        //bit 176-211: unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled
+        //bit 212-251: debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
+        //bit 252: virtual accounting is enabled for the reserve
+        //bit 253-255 unused
 
         uint256 data;
     }
@@ -69,30 +111,49 @@ library DataTypes {
         uint256 data;
     }
 
-    struct EModeCategory {
+    // DEPRECATED: kept for backwards compatibility, might be removed in a future version
+    struct EModeCategoryLegacy {
         // each eMode category has a custom ltv and liquidation threshold
         uint16 ltv;
         uint16 liquidationThreshold;
         uint16 liquidationBonus;
-        // each eMode category may or may not have a custom oracle to override the individual assets price oracles
+        // DEPRECATED
         address priceSource;
         string label;
     }
 
+    struct CollateralConfig {
+        uint16 ltv;
+        uint16 liquidationThreshold;
+        uint16 liquidationBonus;
+    }
+
+    struct EModeCategoryBaseConfiguration {
+        uint16 ltv;
+        uint16 liquidationThreshold;
+        uint16 liquidationBonus;
+        string label;
+    }
+
+    struct EModeCategory {
+        // each eMode category has a custom ltv and liquidation threshold
+        uint16 ltv;
+        uint16 liquidationThreshold;
+        uint16 liquidationBonus;
+        uint128 collateralBitmap;
+        string label;
+        uint128 borrowableBitmap;
+    }
+
     enum InterestRateMode {
         NONE,
-        STABLE,
+        __DEPRECATED,
         VARIABLE
     }
 
     struct ReserveCache {
         uint256 currScaledVariableDebt;
         uint256 nextScaledVariableDebt;
-        uint256 currPrincipalStableDebt;
-        uint256 currAvgStableBorrowRate;
-        uint256 currTotalStableDebt;
-        uint256 nextAvgStableBorrowRate;
-        uint256 nextTotalStableDebt;
         uint256 currLiquidityIndex;
         uint256 nextLiquidityIndex;
         uint256 currVariableBorrowIndex;
@@ -102,10 +163,8 @@ library DataTypes {
         uint256 reserveFactor;
         ReserveConfigurationMap reserveConfiguration;
         address aTokenAddress;
-        address stableDebtTokenAddress;
         address variableDebtTokenAddress;
         uint40 reserveLastUpdateTimestamp;
-        uint40 stableDebtLastUpdateTimestamp;
     }
 
     struct ExecuteLiquidationCallParams {
@@ -135,7 +194,6 @@ library DataTypes {
         InterestRateMode interestRateMode;
         uint16 referralCode;
         bool releaseUnderlying;
-        uint256 maxStableRateBorrowSizePercent;
         uint256 reservesCount;
         address oracle;
         uint8 userEModeCategory;
@@ -187,9 +245,9 @@ library DataTypes {
         uint16 referralCode;
         uint256 flashLoanPremiumToProtocol;
         uint256 flashLoanPremiumTotal;
-        uint256 maxStableRateBorrowSizePercent;
         uint256 reservesCount;
         address addressesProvider;
+        address pool;
         uint8 userEModeCategory;
         bool isAuthorizedFlashBorrower;
     }
@@ -228,7 +286,6 @@ library DataTypes {
         address userAddress;
         uint256 amount;
         InterestRateMode interestRateMode;
-        uint256 maxStableLoanPercent;
         uint256 reservesCount;
         address oracle;
         uint8 userEModeCategory;
@@ -249,18 +306,16 @@ library DataTypes {
         uint256 unbacked;
         uint256 liquidityAdded;
         uint256 liquidityTaken;
-        uint256 totalStableDebt;
-        uint256 totalVariableDebt;
-        uint256 averageStableBorrowRate;
+        uint256 totalDebt;
         uint256 reserveFactor;
         address reserve;
-        address aToken;
+        bool usingVirtualBalance;
+        uint256 virtualUnderlyingBalance;
     }
 
     struct InitReserveParams {
         address asset;
         address aTokenAddress;
-        address stableDebtAddress;
         address variableDebtAddress;
         address interestRateStrategyAddress;
         uint16 reservesCount;
diff --git a/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/EModeConfiguration.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/EModeConfiguration.sol
new file mode 100644
index 0000000..2b0489a
--- /dev/null
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/EModeConfiguration.sol
@@ -0,0 +1,59 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+import {Errors} from "../helpers/Errors.sol";
+import {DataTypes} from "../types/DataTypes.sol";
+import {ReserveConfiguration} from "./ReserveConfiguration.sol";
+
+/**
+ * @title EModeConfiguration library
+ * @author BGD Labs
+ * @notice Implements the bitmap logic to handle the eMode configuration
+ */
+library EModeConfiguration {
+    /**
+     * @notice Sets a bit in a given bitmap that represents the reserve index range
+     * @dev The supplied bitmap is supposed to be a uint128 in which each bit represents a reserve
+     * @param bitmap The bitmap
+     * @param reserveIndex The index of the reserve in the bitmap
+     * @param enabled True if the reserveIndex should be enabled on the bitmap, false otherwise
+     * @return The altered bitmap
+     */
+    function setReserveBitmapBit(
+        uint128 bitmap,
+        uint256 reserveIndex,
+        bool enabled
+    ) internal pure returns (uint128) {
+        unchecked {
+            require(
+                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,
+                Errors.INVALID_RESERVE_INDEX
+            );
+            uint128 bit = uint128(1 << reserveIndex);
+            if (enabled) {
+                return bitmap | bit;
+            } else {
+                return bitmap & ~bit;
+            }
+        }
+    }
+
+    /**
+     * @notice Validates if a reserveIndex is flagged as enabled on a given bitmap
+     * @param bitmap The bitmap
+     * @param reserveIndex The index of the reserve in the bitmap
+     * @return True if the reserveindex is flagged true
+     */
+    function isReserveEnabledOnBitmap(
+        uint128 bitmap,
+        uint256 reserveIndex
+    ) internal pure returns (bool) {
+        unchecked {
+            require(
+                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,
+                Errors.INVALID_RESERVE_INDEX
+            );
+            return (bitmap >> reserveIndex) & 1 != 0;
+        }
+    }
+}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/EModeLogic.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/EModeLogic.sol
index 3d098ba..4458909 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/EModeLogic.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/EModeLogic.sol
@@ -46,67 +46,27 @@ library EModeLogic {
         DataTypes.UserConfigurationMap storage userConfig,
         DataTypes.ExecuteSetUserEModeParams memory params
     ) external {
+        if (usersEModeCategory[msg.sender] == params.categoryId) return;
+
         ValidationLogic.validateSetUserEMode(
-            reservesData,
-            reservesList,
             eModeCategories,
             userConfig,
             params.reservesCount,
             params.categoryId
         );
 
-        uint8 prevCategoryId = usersEModeCategory[msg.sender];
         usersEModeCategory[msg.sender] = params.categoryId;
 
-        if (prevCategoryId != 0) {
-            ValidationLogic.validateHealthFactor(
-                reservesData,
-                reservesList,
-                eModeCategories,
-                userConfig,
-                msg.sender,
-                params.categoryId,
-                params.reservesCount,
-                params.oracle
-            );
-        }
+        ValidationLogic.validateHealthFactor(
+            reservesData,
+            reservesList,
+            eModeCategories,
+            userConfig,
+            msg.sender,
+            params.categoryId,
+            params.reservesCount,
+            params.oracle
+        );
         emit UserEModeSet(msg.sender, params.categoryId);
     }
-
-    /**
-     * @notice Gets the eMode configuration and calculates the eMode asset price if a custom oracle is configured
-     * @dev The eMode asset price returned is 0 if no oracle is specified
-     * @param category The user eMode category
-     * @param oracle The price oracle
-     * @return The eMode ltv
-     * @return The eMode liquidation threshold
-     * @return The eMode asset price
-     */
-    function getEModeConfiguration(
-        DataTypes.EModeCategory storage category,
-        IPriceOracleGetter oracle
-    ) internal view returns (uint256, uint256, uint256) {
-        uint256 eModeAssetPrice = 0;
-        address eModePriceSource = category.priceSource;
-
-        if (eModePriceSource != address(0)) {
-            eModeAssetPrice = oracle.getAssetPrice(eModePriceSource);
-        }
-
-        return (category.ltv, category.liquidationThreshold, eModeAssetPrice);
-    }
-
-    /**
-     * @notice Checks if eMode is active for a user and if yes, if the asset belongs to the eMode category chosen
-     * @param eModeUserCategory The user eMode category
-     * @param eModeAssetCategory The asset eMode category
-     * @return True if eMode is active and the asset belongs to the eMode category chosen by the user, false otherwise
-     */
-    function isInEModeCategory(
-        uint256 eModeUserCategory,
-        uint256 eModeAssetCategory
-    ) internal pure returns (bool) {
-        return (eModeUserCategory != 0 &&
-            eModeAssetCategory == eModeUserCategory);
-    }
 }
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/Errors.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/Errors.sol
index c21e875..d2a0c13 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/Errors.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/Errors.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: BUSL-1.1
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
@@ -37,7 +37,6 @@ library Errors {
     string public constant RESERVE_FROZEN = "28"; // 'Action cannot be performed because the reserve is frozen'
     string public constant RESERVE_PAUSED = "29"; // 'Action cannot be performed because the reserve is paused'
     string public constant BORROWING_NOT_ENABLED = "30"; // 'Borrowing is not enabled'
-    string public constant STABLE_BORROWING_NOT_ENABLED = "31"; // 'Stable borrowing is not enabled'
     string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = "32"; // 'User cannot withdraw more than the available balance'
     string public constant INVALID_INTEREST_RATE_MODE_SELECTED = "33"; // 'Invalid interest rate mode selected'
     string public constant COLLATERAL_BALANCE_IS_ZERO = "34"; // 'The collateral balance is 0'
@@ -45,10 +44,8 @@ library Errors {
         "35"; // 'Health factor is lesser than the liquidation threshold'
     string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = "36"; // 'There is not enough collateral to cover a new borrow'
     string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = "37"; // 'Collateral is (mostly) the same currency that is being borrowed'
-    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = "38"; // 'The requested amount is greater than the max loan size in stable rate mode'
     string public constant NO_DEBT_OF_SELECTED_TYPE = "39"; // 'For repayment of a specific type of debt, the user needs to have debt that type'
     string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = "40"; // 'To repay on behalf of a user an explicit amount to repay is needed'
-    string public constant NO_OUTSTANDING_STABLE_DEBT = "41"; // 'User does not have outstanding stable rate debt on this reserve'
     string public constant NO_OUTSTANDING_VARIABLE_DEBT = "42"; // 'User does not have outstanding variable rate debt on this reserve'
     string public constant UNDERLYING_BALANCE_ZERO = "43"; // 'The underlying balance needs to be greater than 0'
     string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = "44"; // 'Interest rate rebalance conditions were not met'
@@ -61,7 +58,6 @@ library Errors {
     string public constant UNBACKED_MINT_CAP_EXCEEDED = "52"; // 'Unbacked mint cap is exceeded'
     string public constant DEBT_CEILING_EXCEEDED = "53"; // 'Debt ceiling is exceeded'
     string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = "54"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
-    string public constant STABLE_DEBT_NOT_ZERO = "55"; // 'Stable debt supply is not zero'
     string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = "56"; // 'Variable debt supply is not zero'
     string public constant LTV_VALIDATION_FAILED = "57"; // 'Ltv validation failed'
     string public constant INCONSISTENT_EMODE_CATEGORY = "58"; // 'Inconsistent eMode category'
@@ -90,12 +86,19 @@ library Errors {
     string public constant DEBT_CEILING_NOT_ZERO = "81"; // 'Debt ceiling is not zero'
     string public constant ASSET_NOT_LISTED = "82"; // 'Asset is not listed'
     string public constant INVALID_OPTIMAL_USAGE_RATIO = "83"; // 'Invalid optimal usage ratio'
-    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = "84"; // 'Invalid optimal stable to total debt ratio'
     string public constant UNDERLYING_CANNOT_BE_RESCUED = "85"; // 'The underlying asset cannot be rescued'
     string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = "86"; // 'Reserve has already been added to reserve list'
     string public constant POOL_ADDRESSES_DO_NOT_MATCH = "87"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
-    string public constant STABLE_BORROWING_ENABLED = "88"; // 'Stable borrowing is enabled'
     string public constant SILOED_BORROWING_VIOLATION = "89"; // 'User is trying to borrow multiple assets including a siloed one'
     string public constant RESERVE_DEBT_NOT_ZERO = "90"; // the total debt of the reserve needs to be 0
     string public constant FLASHLOAN_DISABLED = "91"; // FlashLoaning for this asset is disabled
+    string public constant INVALID_MAX_RATE = "92"; // The expect maximum borrow rate is invalid
+    string public constant WITHDRAW_TO_ATOKEN = "93"; // Withdrawing to the aToken is not allowed
+    string public constant SUPPLY_TO_ATOKEN = "94"; // Supplying to the aToken is not allowed
+    string public constant SLOPE_2_MUST_BE_GTE_SLOPE_1 = "95"; // Variable interest rate slope 2 can not be lower than slope 1
+    string public constant CALLER_NOT_RISK_OR_POOL_OR_EMERGENCY_ADMIN = "96"; // 'The caller of the function is not a risk, pool or emergency admin'
+    string public constant LIQUIDATION_GRACE_SENTINEL_CHECK_FAILED = "97"; // 'Liquidation grace sentinel validation failed'
+    string public constant INVALID_GRACE_PERIOD = "98"; // Grace period above a valid range
+    string public constant INVALID_FREEZE_STATE = "99"; // Reserve is already in the passed freeze state
+    string public constant NOT_BORROWABLE_IN_EMODE = "100"; // Asset not borrowable in eMode
 }
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/FlashLoanLogic.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/FlashLoanLogic.sol
index 5b7c1cf..7cd5e95 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/FlashLoanLogic.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/FlashLoanLogic.sol
@@ -6,8 +6,8 @@ import {SafeCast} from "../../../dependencies/openzeppelin/contracts/SafeCast.so
 import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
 import {IAToken} from "../../../interfaces/IAToken.sol";
 import {IPool} from "../../../interfaces/IPool.sol";
-import {IFlashLoanReceiver} from "../../../flashloan/interfaces/IFlashLoanReceiver.sol";
-import {IFlashLoanSimpleReceiver} from "../../../flashloan/interfaces/IFlashLoanSimpleReceiver.sol";
+import {IFlashLoanReceiver} from "../../../misc/flashloan/interfaces/IFlashLoanReceiver.sol";
+import {IFlashLoanSimpleReceiver} from "../../../misc/flashloan/interfaces/IFlashLoanSimpleReceiver.sol";
 import {IPoolAddressesProvider} from "../../../interfaces/IPoolAddressesProvider.sol";
 import {ReserveConfiguration} from "../configuration/ReserveConfiguration.sol";
 import {Errors} from "../helpers/Errors.sol";
@@ -46,7 +46,6 @@ library FlashLoanLogic {
     // Helper struct for internal variables used in the `executeFlashLoan` function
     struct FlashLoanLocalVars {
         IFlashLoanReceiver receiver;
-        uint256 i;
         address currentAsset;
         uint256 currentAmount;
         uint256[] totalPremiums;
@@ -94,24 +93,25 @@ library FlashLoanLogic {
             ? (0, 0)
             : (params.flashLoanPremiumTotal, params.flashLoanPremiumToProtocol);
 
-        for (vars.i = 0; vars.i < params.assets.length; vars.i++) {
-            vars.currentAmount = params.amounts[vars.i];
-            vars.totalPremiums[vars.i] = DataTypes.InterestRateMode(
-                params.interestRateModes[vars.i]
+        for (uint256 i = 0; i < params.assets.length; i++) {
+            vars.currentAmount = params.amounts[i];
+            vars.totalPremiums[i] = DataTypes.InterestRateMode(
+                params.interestRateModes[i]
             ) == DataTypes.InterestRateMode.NONE
                 ? vars.currentAmount.percentMul(vars.flashloanPremiumTotal)
                 : 0;
 
             if (
-                reservesData[params.assets[vars.i]]
+                reservesData[params.assets[i]]
                     .configuration
                     .getIsVirtualAccActive()
             ) {
-                reservesData[params.assets[vars.i]]
-                    .virtualUnderlyingBalance -= vars.currentAmount.toUint128();
+                reservesData[params.assets[i]].virtualUnderlyingBalance -= vars
+                    .currentAmount
+                    .toUint128();
             }
 
-            IAToken(reservesData[params.assets[vars.i]].aTokenAddress)
+            IAToken(reservesData[params.assets[i]].aTokenAddress)
                 .transferUnderlyingTo(
                     params.receiverAddress,
                     vars.currentAmount
@@ -129,12 +129,12 @@ library FlashLoanLogic {
             Errors.INVALID_FLASHLOAN_EXECUTOR_RETURN
         );
 
-        for (vars.i = 0; vars.i < params.assets.length; vars.i++) {
-            vars.currentAsset = params.assets[vars.i];
-            vars.currentAmount = params.amounts[vars.i];
+        for (uint256 i = 0; i < params.assets.length; i++) {
+            vars.currentAsset = params.assets[i];
+            vars.currentAmount = params.amounts[i];
 
             if (
-                DataTypes.InterestRateMode(params.interestRateModes[vars.i]) ==
+                DataTypes.InterestRateMode(params.interestRateModes[i]) ==
                 DataTypes.InterestRateMode.NONE
             ) {
                 _handleFlashLoanRepayment(
@@ -143,7 +143,7 @@ library FlashLoanLogic {
                         asset: vars.currentAsset,
                         receiverAddress: params.receiverAddress,
                         amount: vars.currentAmount,
-                        totalPremium: vars.totalPremiums[vars.i],
+                        totalPremium: vars.totalPremiums[i],
                         flashLoanPremiumToProtocol: vars
                             .flashloanPremiumToProtocol,
                         referralCode: params.referralCode
@@ -163,12 +163,10 @@ library FlashLoanLogic {
                         onBehalfOf: params.onBehalfOf,
                         amount: vars.currentAmount,
                         interestRateMode: DataTypes.InterestRateMode(
-                            params.interestRateModes[vars.i]
+                            params.interestRateModes[i]
                         ),
                         referralCode: params.referralCode,
                         releaseUnderlying: false,
-                        maxStableRateBorrowSizePercent: IPool(params.pool)
-                            .MAX_STABLE_RATE_BORROW_SIZE_PERCENT(),
                         reservesCount: IPool(params.pool).getReservesCount(),
                         oracle: IPoolAddressesProvider(params.addressesProvider)
                             .getPriceOracle(),
@@ -186,9 +184,7 @@ library FlashLoanLogic {
                     msg.sender,
                     vars.currentAsset,
                     vars.currentAmount,
-                    DataTypes.InterestRateMode(
-                        params.interestRateModes[vars.i]
-                    ),
+                    DataTypes.InterestRateMode(params.interestRateModes[i]),
                     0,
                     params.referralCode
                 );
@@ -310,7 +306,7 @@ library FlashLoanLogic {
             msg.sender,
             params.asset,
             params.amount,
-            DataTypes.InterestRateMode(0),
+            DataTypes.InterestRateMode.NONE,
             params.totalPremium,
             params.referralCode
         );
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/GenericLogic.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/GenericLogic.sol
index b61d73d..a3efd9a 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/GenericLogic.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/GenericLogic.sol
@@ -6,6 +6,7 @@ import {IScaledBalanceToken} from "../../../interfaces/IScaledBalanceToken.sol";
 import {IPriceOracleGetter} from "../../../interfaces/IPriceOracleGetter.sol";
 import {ReserveConfiguration} from "../configuration/ReserveConfiguration.sol";
 import {UserConfiguration} from "../configuration/UserConfiguration.sol";
+import {EModeConfiguration} from "../configuration/EModeConfiguration.sol";
 import {PercentageMath} from "../math/PercentageMath.sol";
 import {WadRayMath} from "../math/WadRayMath.sol";
 import {DataTypes} from "../types/DataTypes.sol";
@@ -37,10 +38,8 @@ library GenericLogic {
         uint256 totalDebtInBaseCurrency;
         uint256 avgLtv;
         uint256 avgLiquidationThreshold;
-        uint256 eModeAssetPrice;
         uint256 eModeLtv;
         uint256 eModeLiqThreshold;
-        uint256 eModeAssetCategory;
         address currentReserveAddress;
         bool hasZeroLtvCollateral;
         bool isInEModeCategory;
@@ -78,14 +77,9 @@ library GenericLogic {
         CalculateUserAccountDataVars memory vars;
 
         if (params.userEModeCategory != 0) {
-            (
-                vars.eModeLtv,
-                vars.eModeLiqThreshold,
-                vars.eModeAssetPrice
-            ) = EModeLogic.getEModeConfiguration(
-                eModeCategories[params.userEModeCategory],
-                IPriceOracleGetter(params.oracle)
-            );
+            vars.eModeLtv = eModeCategories[params.userEModeCategory].ltv;
+            vars.eModeLiqThreshold = eModeCategories[params.userEModeCategory]
+                .liquidationThreshold;
         }
 
         while (vars.i < params.reservesCount) {
@@ -114,20 +108,16 @@ library GenericLogic {
                 vars.liquidationThreshold,
                 ,
                 vars.decimals,
-                ,
-                vars.eModeAssetCategory
+
             ) = currentReserve.configuration.getParams();
 
             unchecked {
                 vars.assetUnit = 10 ** vars.decimals;
             }
 
-            vars.assetPrice = vars.eModeAssetPrice != 0 &&
-                params.userEModeCategory == vars.eModeAssetCategory
-                ? vars.eModeAssetPrice
-                : IPriceOracleGetter(params.oracle).getAssetPrice(
-                    vars.currentReserveAddress
-                );
+            vars.assetPrice = IPriceOracleGetter(params.oracle).getAssetPrice(
+                vars.currentReserveAddress
+            );
 
             if (
                 vars.liquidationThreshold != 0 &&
@@ -143,10 +133,13 @@ library GenericLogic {
                 vars.totalCollateralInBaseCurrency += vars
                     .userBalanceInBaseCurrency;
 
-                vars.isInEModeCategory = EModeLogic.isInEModeCategory(
-                    params.userEModeCategory,
-                    vars.eModeAssetCategory
-                );
+                vars.isInEModeCategory =
+                    params.userEModeCategory != 0 &&
+                    EModeConfiguration.isReserveEnabledOnBitmap(
+                        eModeCategories[params.userEModeCategory]
+                            .collateralBitmap,
+                        vars.i
+                    );
 
                 if (vars.ltv != 0) {
                     vars.avgLtv +=
@@ -223,7 +216,7 @@ library GenericLogic {
         uint256 availableBorrowsInBaseCurrency = totalCollateralInBaseCurrency
             .percentMul(ltv);
 
-        if (availableBorrowsInBaseCurrency < totalDebtInBaseCurrency) {
+        if (availableBorrowsInBaseCurrency <= totalDebtInBaseCurrency) {
             return 0;
         }
 
@@ -235,7 +228,7 @@ library GenericLogic {
 
     /**
      * @notice Calculates total debt of the user in the based currency used to normalize the values of the assets
-     * @dev This fetches the `balanceOf` of the stable and variable debt tokens for the user. For gas reasons, the
+     * @dev This fetches the `balanceOf` of the variable debt token for the user. For gas reasons, the
      * variable debt balance is calculated by fetching `scaledBalancesOf` normalized debt, which is cheaper than
      * fetching `balanceOf`
      * @param user The address of the user
@@ -254,16 +247,13 @@ library GenericLogic {
         uint256 userTotalDebt = IScaledBalanceToken(
             reserve.variableDebtTokenAddress
         ).scaledBalanceOf(user);
-        if (userTotalDebt != 0) {
-            userTotalDebt = userTotalDebt.rayMul(reserve.getNormalizedDebt());
+        if (userTotalDebt == 0) {
+            return 0;
         }
 
         userTotalDebt =
-            userTotalDebt +
-            IERC20(reserve.stableDebtTokenAddress).balanceOf(user);
-
-        userTotalDebt = assetPrice * userTotalDebt;
-
+            userTotalDebt.rayMul(reserve.getNormalizedDebt()) *
+            assetPrice;
         unchecked {
             return userTotalDebt / assetUnit;
         }
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/Helpers.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/Helpers.sol
deleted file mode 100644
index bf1903f..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/Helpers.sol
+++ /dev/null
@@ -1,28 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
-
-import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
-import {DataTypes} from "../types/DataTypes.sol";
-
-/**
- * @title Helpers library
- * @author Aave
- */
-library Helpers {
-    /**
-     * @notice Fetches the user current stable and variable debt balances
-     * @param user The user address
-     * @param reserveCache The reserve cache data object
-     * @return The stable debt balance
-     * @return The variable debt balance
-     */
-    function getUserCurrentDebt(
-        address user,
-        DataTypes.ReserveCache memory reserveCache
-    ) internal view returns (uint256, uint256) {
-        return (
-            IERC20(reserveCache.stableDebtTokenAddress).balanceOf(user),
-            IERC20(reserveCache.variableDebtTokenAddress).balanceOf(user)
-        );
-    }
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IACLManager.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IACLManager.sol
index 679bacf..2461720 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IACLManager.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IACLManager.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IAToken.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IAToken.sol
index fcdfb3f..66c69b5 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IAToken.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IAToken.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IERC20} from "../dependencies/openzeppelin/contracts/IERC20.sol";
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IAaveIncentivesController.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IAaveIncentivesController.sol
index 29be08d..5364abd 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IAaveIncentivesController.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IAaveIncentivesController.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IAaveOracle.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IAaveOracle.sol
deleted file mode 100644
index 8125382..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IAaveOracle.sol
+++ /dev/null
@@ -1,82 +0,0 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity ^0.8.0;
-
-import {IPriceOracleGetter} from "./IPriceOracleGetter.sol";
-import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
-
-/**
- * @title IAaveOracle
- * @author Aave
- * @notice Defines the basic interface for the Aave Oracle
- */
-interface IAaveOracle is IPriceOracleGetter {
-    /**
-     * @dev Emitted after the base currency is set
-     * @param baseCurrency The base currency of used for price quotes
-     * @param baseCurrencyUnit The unit of the base currency
-     */
-    event BaseCurrencySet(
-        address indexed baseCurrency,
-        uint256 baseCurrencyUnit
-    );
-
-    /**
-     * @dev Emitted after the price source of an asset is updated
-     * @param asset The address of the asset
-     * @param source The price source of the asset
-     */
-    event AssetSourceUpdated(address indexed asset, address indexed source);
-
-    /**
-     * @dev Emitted after the address of fallback oracle is updated
-     * @param fallbackOracle The address of the fallback oracle
-     */
-    event FallbackOracleUpdated(address indexed fallbackOracle);
-
-    /**
-     * @notice Returns the PoolAddressesProvider
-     * @return The address of the PoolAddressesProvider contract
-     */
-    function ADDRESSES_PROVIDER()
-        external
-        view
-        returns (IPoolAddressesProvider);
-
-    /**
-     * @notice Sets or replaces price sources of assets
-     * @param assets The addresses of the assets
-     * @param sources The addresses of the price sources
-     */
-    function setAssetSources(
-        address[] calldata assets,
-        address[] calldata sources
-    ) external;
-
-    /**
-     * @notice Sets the fallback oracle
-     * @param fallbackOracle The address of the fallback oracle
-     */
-    function setFallbackOracle(address fallbackOracle) external;
-
-    /**
-     * @notice Returns a list of prices from a list of assets addresses
-     * @param assets The list of assets addresses
-     * @return The prices of the given assets
-     */
-    function getAssetsPrices(
-        address[] calldata assets
-    ) external view returns (uint256[] memory);
-
-    /**
-     * @notice Returns the address of the source for an asset address
-     * @param asset The address of the asset
-     * @return The address of the source
-     */
-    function getSourceOfAsset(address asset) external view returns (address);
-
-    /**
-     * @notice Returns the address of the fallback oracle
-     * @return The address of the fallback oracle
-     */
-    function getFallbackOracle() external view returns (address);
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ICollector.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ICollector.sol
deleted file mode 100644
index e1f1b3a..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ICollector.sol
+++ /dev/null
@@ -1,197 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity >=0.6.0;
-
-/**
- * @title ICollector
- * @notice Defines the interface of the Collector contract
- * @author Aave
- **/
-interface ICollector {
-    struct Stream {
-        uint256 deposit;
-        uint256 ratePerSecond;
-        uint256 remainingBalance;
-        uint256 startTime;
-        uint256 stopTime;
-        address recipient;
-        address sender;
-        address tokenAddress;
-        bool isEntity;
-    }
-
-    /** @notice Emitted when the funds admin changes
-     * @param fundsAdmin The new funds admin.
-     **/
-    event NewFundsAdmin(address indexed fundsAdmin);
-
-    /** @notice Emitted when the new stream is created
-     * @param streamId The identifier of the stream.
-     * @param sender The address of the collector.
-     * @param recipient The address towards which the money is streamed.
-     * @param deposit The amount of money to be streamed.
-     * @param tokenAddress The ERC20 token to use as streaming currency.
-     * @param startTime The unix timestamp for when the stream starts.
-     * @param stopTime The unix timestamp for when the stream stops.
-     **/
-    event CreateStream(
-        uint256 indexed streamId,
-        address indexed sender,
-        address indexed recipient,
-        uint256 deposit,
-        address tokenAddress,
-        uint256 startTime,
-        uint256 stopTime
-    );
-
-    /**
-     * @notice Emmitted when withdraw happens from the contract to the recipient's account.
-     * @param streamId The id of the stream to withdraw tokens from.
-     * @param recipient The address towards which the money is streamed.
-     * @param amount The amount of tokens to withdraw.
-     */
-    event WithdrawFromStream(
-        uint256 indexed streamId,
-        address indexed recipient,
-        uint256 amount
-    );
-
-    /**
-     * @notice Emmitted when the stream is canceled.
-     * @param streamId The id of the stream to withdraw tokens from.
-     * @param sender The address of the collector.
-     * @param recipient The address towards which the money is streamed.
-     * @param senderBalance The sender's balance at the moment of cancelling.
-     * @param recipientBalance The recipient's balance at the moment of cancelling.
-     */
-    event CancelStream(
-        uint256 indexed streamId,
-        address indexed sender,
-        address indexed recipient,
-        uint256 senderBalance,
-        uint256 recipientBalance
-    );
-
-    /** @notice Returns the mock ETH reference address
-     * @return address The address
-     **/
-    function ETH_MOCK_ADDRESS() external pure returns (address);
-
-    /** @notice Initializes the contracts
-     * @param fundsAdmin Funds admin address
-     * @param nextStreamId StreamId to set, applied if greater than 0
-     **/
-    function initialize(address fundsAdmin, uint256 nextStreamId) external;
-
-    /**
-     * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)
-     * @return address The address of the funds admin
-     **/
-    function getFundsAdmin() external view returns (address);
-
-    /**
-     * @notice Returns the available funds for the given stream id and address.
-     * @param streamId The id of the stream for which to query the balance.
-     * @param who The address for which to query the balance.
-     * @notice Returns the total funds allocated to `who` as uint256.
-     */
-    function balanceOf(
-        uint256 streamId,
-        address who
-    ) external view returns (uint256 balance);
-
-    /**
-     * @dev Function for the funds admin to give ERC20 allowance to other parties
-     * @param token The address of the token to give allowance from
-     * @param recipient Allowance's recipient
-     * @param amount Allowance to approve
-     **/
-    function approve(
-        //IERC20 token,
-        address token,
-        address recipient,
-        uint256 amount
-    ) external;
-
-    /**
-     * @notice Function for the funds admin to transfer ERC20 tokens to other parties
-     * @param token The address of the token to transfer
-     * @param recipient Transfer's recipient
-     * @param amount Amount to transfer
-     **/
-    function transfer(
-        //IERC20 token,
-        address token,
-        address recipient,
-        uint256 amount
-    ) external;
-
-    /**
-   * @dev Transfer the ownership of the funds administrator role.
-          This function should only be callable by the current funds administrator.
-   * @param admin The address of the new funds administrator
-   */
-    function setFundsAdmin(address admin) external;
-
-    /**
-     * @notice Creates a new stream funded by this contracts itself and paid towards `recipient`.
-     * @param recipient The address towards which the money is streamed.
-     * @param deposit The amount of money to be streamed.
-     * @param tokenAddress The ERC20 token to use as streaming currency.
-     * @param startTime The unix timestamp for when the stream starts.
-     * @param stopTime The unix timestamp for when the stream stops.
-     * @return streamId the uint256 id of the newly created stream.
-     */
-    function createStream(
-        address recipient,
-        uint256 deposit,
-        address tokenAddress,
-        uint256 startTime,
-        uint256 stopTime
-    ) external returns (uint256 streamId);
-
-    /**
-     * @notice Returns the stream with all its properties.
-     * @dev Throws if the id does not point to a valid stream.
-     * @param streamId The id of the stream to query.
-     * @notice Returns the stream object.
-     */
-    function getStream(
-        uint256 streamId
-    )
-        external
-        view
-        returns (
-            address sender,
-            address recipient,
-            uint256 deposit,
-            address tokenAddress,
-            uint256 startTime,
-            uint256 stopTime,
-            uint256 remainingBalance,
-            uint256 ratePerSecond
-        );
-
-    /**
-     * @notice Withdraws from the contract to the recipient's account.
-     * @param streamId The id of the stream to withdraw tokens from.
-     * @param amount The amount of tokens to withdraw.
-     * @return bool Returns true if successful.
-     */
-    function withdrawFromStream(
-        uint256 streamId,
-        uint256 amount
-    ) external returns (bool);
-
-    /**
-     * @notice Cancels the stream and transfers the tokens back on a pro rata basis.
-     * @param streamId The id of the stream to cancel.
-     * @return bool Returns true if successful.
-     */
-    function cancelStream(uint256 streamId) external returns (bool);
-
-    /**
-     * @notice Returns the next available stream id
-     * @return nextStreamId Returns the stream id.
-     */
-    function getNextStreamId() external view returns (uint256);
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IDefaultInterestRateStrategy.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IDefaultInterestRateStrategy.sol
deleted file mode 100644
index d963f34..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IDefaultInterestRateStrategy.sol
+++ /dev/null
@@ -1,106 +0,0 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity ^0.8.0;
-
-import {IReserveInterestRateStrategy} from "./IReserveInterestRateStrategy.sol";
-import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
-
-/**
- * @title IDefaultInterestRateStrategy
- * @author Aave
- * @notice Defines the basic interface of the DefaultReserveInterestRateStrategy
- */
-interface IDefaultInterestRateStrategy is IReserveInterestRateStrategy {
-    /**
-     * @notice Returns the usage ratio at which the pool aims to obtain most competitive borrow rates.
-     * @return The optimal usage ratio, expressed in ray.
-     */
-    function OPTIMAL_USAGE_RATIO() external view returns (uint256);
-
-    /**
-     * @notice Returns the optimal stable to total debt ratio of the reserve.
-     * @return The optimal stable to total debt ratio, expressed in ray.
-     */
-    function OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO()
-        external
-        view
-        returns (uint256);
-
-    /**
-     * @notice Returns the excess usage ratio above the optimal.
-     * @dev It's always equal to 1-optimal usage ratio (added as constant for gas optimizations)
-     * @return The max excess usage ratio, expressed in ray.
-     */
-    function MAX_EXCESS_USAGE_RATIO() external view returns (uint256);
-
-    /**
-     * @notice Returns the excess stable debt ratio above the optimal.
-     * @dev It's always equal to 1-optimal stable to total debt ratio (added as constant for gas optimizations)
-     * @return The max excess stable to total debt ratio, expressed in ray.
-     */
-    function MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO()
-        external
-        view
-        returns (uint256);
-
-    /**
-     * @notice Returns the address of the PoolAddressesProvider
-     * @return The address of the PoolAddressesProvider contract
-     */
-    function ADDRESSES_PROVIDER()
-        external
-        view
-        returns (IPoolAddressesProvider);
-
-    /**
-     * @notice Returns the variable rate slope below optimal usage ratio
-     * @dev It's the variable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO
-     * @return The variable rate slope, expressed in ray
-     */
-    function getVariableRateSlope1() external view returns (uint256);
-
-    /**
-     * @notice Returns the variable rate slope above optimal usage ratio
-     * @dev It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO
-     * @return The variable rate slope, expressed in ray
-     */
-    function getVariableRateSlope2() external view returns (uint256);
-
-    /**
-     * @notice Returns the stable rate slope below optimal usage ratio
-     * @dev It's the stable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO
-     * @return The stable rate slope, expressed in ray
-     */
-    function getStableRateSlope1() external view returns (uint256);
-
-    /**
-     * @notice Returns the stable rate slope above optimal usage ratio
-     * @dev It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO
-     * @return The stable rate slope, expressed in ray
-     */
-    function getStableRateSlope2() external view returns (uint256);
-
-    /**
-     * @notice Returns the stable rate excess offset
-     * @dev It's an additional premium applied to the stable when stable debt > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO
-     * @return The stable rate excess offset, expressed in ray
-     */
-    function getStableRateExcessOffset() external view returns (uint256);
-
-    /**
-     * @notice Returns the base stable borrow rate
-     * @return The base stable borrow rate, expressed in ray
-     */
-    function getBaseStableBorrowRate() external view returns (uint256);
-
-    /**
-     * @notice Returns the base variable borrow rate
-     * @return The base variable borrow rate, expressed in ray
-     */
-    function getBaseVariableBorrowRate() external view returns (uint256);
-
-    /**
-     * @notice Returns the maximum variable borrow rate
-     * @return The maximum variable borrow rate, expressed in ray
-     */
-    function getMaxVariableBorrowRate() external view returns (uint256);
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IERC20.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IERC20.sol
index adc5aaf..b2b4316 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IERC20.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IERC20.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IFlashLoanReceiver.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IFlashLoanReceiver.sol
index a034f31..28fd959 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IFlashLoanReceiver.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IFlashLoanReceiver.sol
@@ -1,8 +1,8 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-import {IPoolAddressesProvider} from "../../interfaces/IPoolAddressesProvider.sol";
-import {IPool} from "../../interfaces/IPool.sol";
+import {IPoolAddressesProvider} from "../../../interfaces/IPoolAddressesProvider.sol";
+import {IPool} from "../../../interfaces/IPool.sol";
 
 /**
  * @title IFlashLoanReceiver
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IFlashLoanSimpleReceiver.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IFlashLoanSimpleReceiver.sol
index 8e5eda8..3e139f0 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IFlashLoanSimpleReceiver.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IFlashLoanSimpleReceiver.sol
@@ -1,8 +1,8 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-import {IPoolAddressesProvider} from "../../interfaces/IPoolAddressesProvider.sol";
-import {IPool} from "../../interfaces/IPool.sol";
+import {IPoolAddressesProvider} from "../../../interfaces/IPoolAddressesProvider.sol";
+import {IPool} from "../../../interfaces/IPool.sol";
 
 /**
  * @title IFlashLoanSimpleReceiver
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IInitializableAToken.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IInitializableAToken.sol
index 3389a75..a529007 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IInitializableAToken.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IInitializableAToken.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IAaveIncentivesController} from "./IAaveIncentivesController.sol";
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPool.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IPool.sol
index 07ed9c5..3561fff 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPool.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IPool.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
@@ -77,7 +77,7 @@ interface IPool {
      * initiator of the transaction on flashLoan()
      * @param onBehalfOf The address that will be getting the debt
      * @param amount The amount borrowed out
-     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable
+     * @param interestRateMode The rate mode: 2 for Variable, 1 is deprecated (changed on v3.2.0)
      * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray
      * @param referralCode The referral code used
      */
@@ -107,18 +107,6 @@ interface IPool {
         bool useATokens
     );
 
-    /**
-     * @dev Emitted on swapBorrowRateMode()
-     * @param reserve The address of the underlying asset of the reserve
-     * @param user The address of the user swapping his rate mode
-     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
-     */
-    event SwapBorrowRateMode(
-        address indexed reserve,
-        address indexed user,
-        DataTypes.InterestRateMode interestRateMode
-    );
-
     /**
      * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets
      * @param asset The address of the underlying asset of the reserve
@@ -156,23 +144,14 @@ interface IPool {
         address indexed user
     );
 
-    /**
-     * @dev Emitted on rebalanceStableBorrowRate()
-     * @param reserve The address of the underlying asset of the reserve
-     * @param user The address of the user for which the rebalance has been executed
-     */
-    event RebalanceStableBorrowRate(
-        address indexed reserve,
-        address indexed user
-    );
-
     /**
      * @dev Emitted on flashLoan()
      * @param target The address of the flash loan receiver contract
      * @param initiator The address initiating the flash loan
      * @param asset The address of the asset being flash borrowed
      * @param amount The amount flash borrowed
-     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt
+     * @param interestRateMode The flashloan mode: 0 for regular flashloan,
+     *        1 for Stable (Deprecated on v3.2.0), 2 for Variable
      * @param premium The fee flash borrowed
      * @param referralCode The referral code used
      */
@@ -211,7 +190,7 @@ interface IPool {
      * @dev Emitted when the state of a reserve is updated.
      * @param reserve The address of the underlying asset of the reserve
      * @param liquidityRate The next liquidity rate
-     * @param stableBorrowRate The next stable borrow rate
+     * @param stableBorrowRate The next stable borrow rate @note deprecated on v3.2.0
      * @param variableBorrowRate The next variable borrow rate
      * @param liquidityIndex The next liquidity index
      * @param variableBorrowIndex The next variable borrow index
@@ -323,13 +302,12 @@ interface IPool {
 
     /**
      * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower
-     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the
-     * corresponding debt token (StableDebtToken or VariableDebtToken)
+     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the VariableDebtToken
      * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet
-     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`
+     *   and 100 variable debt tokens
      * @param asset The address of the underlying asset to borrow
      * @param amount The amount to be borrowed
-     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable
+     * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
      * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
      *   0 if the action is executed directly by the user, without any middle-man
      * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself
@@ -346,11 +324,11 @@ interface IPool {
 
     /**
      * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned
-     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address
+     * - E.g. User repays 100 USDC, burning 100 variable debt tokens of the `onBehalfOf` address
      * @param asset The address of the borrowed underlying asset previously borrowed
      * @param amount The amount to repay
      * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+     * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
      * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the
      * user calling the function if he wants to reduce/remove his own debt, or the address of any other
      * other borrower whose debt should be removed
@@ -369,7 +347,7 @@ interface IPool {
      * @param asset The address of the borrowed underlying asset previously borrowed
      * @param amount The amount to repay
      * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+     * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
      * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the
      * user calling the function if he wants to reduce/remove his own debt, or the address of any other
      * other borrower whose debt should be removed
@@ -393,13 +371,13 @@ interface IPool {
     /**
      * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the
      * equivalent debt tokens
-     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens
+     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable debt tokens
      * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken
      * balance is not enough to cover the whole debt
      * @param asset The address of the borrowed underlying asset previously borrowed
      * @param amount The amount to repay
      * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+     * @param interestRateMode DEPRECATED in v3.2.0
      * @return The final amount repaid
      */
     function repayWithATokens(
@@ -408,27 +386,6 @@ interface IPool {
         uint256 interestRateMode
     ) external returns (uint256);
 
-    /**
-     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa
-     * @param asset The address of the underlying asset borrowed
-     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
-     */
-    function swapBorrowRateMode(
-        address asset,
-        uint256 interestRateMode
-    ) external;
-
-    /**
-     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.
-     * - Users can be rebalanced if the following conditions are satisfied:
-     *     1. Usage ratio is above 95%
-     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too
-     *        much has been borrowed at a stable rate and suppliers are not earning enough
-     * @param asset The address of the underlying asset borrowed
-     * @param user The address of the user to be rebalanced
-     */
-    function rebalanceStableBorrowRate(address asset, address user) external;
-
     /**
      * @notice Allows suppliers to enable/disable a specific supplied asset as collateral
      * @param asset The address of the underlying asset supplied
@@ -468,9 +425,9 @@ interface IPool {
      * @param amounts The amounts of the assets being flash-borrowed
      * @param interestRateModes Types of the debt to open if the flash loan is not returned:
      *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver
-     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
+     *   1 -> Deprecated on v3.2.0
      *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
-     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2
+     * @param onBehalfOf The address  that will receive the debt in the case of using 2 on `modes`
      * @param params Variadic packed params to pass to the receiver as extra information
      * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
      *   0 if the action is executed directly by the user, without any middle-man
@@ -535,14 +492,12 @@ interface IPool {
      * @dev Only callable by the PoolConfigurator contract
      * @param asset The address of the underlying asset of the reserve
      * @param aTokenAddress The address of the aToken that will be assigned to the reserve
-     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve
      * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve
      * @param interestRateStrategyAddress The address of the interest rate strategy contract
      */
     function initReserve(
         address asset,
         address aTokenAddress,
-        address stableDebtAddress,
         address variableDebtAddress,
         address interestRateStrategyAddress
     ) external;
@@ -550,6 +505,7 @@ interface IPool {
     /**
      * @notice Drop a reserve
      * @dev Only callable by the PoolConfigurator contract
+     * @dev Does not reset eMode flags, which must be considered when reusing the same reserve id for a different reserve.
      * @param asset The address of the underlying asset of the reserve
      */
     function dropReserve(address asset) external;
@@ -565,6 +521,22 @@ interface IPool {
         address rateStrategyAddress
     ) external;
 
+    /**
+     * @notice Accumulates interest to all indexes of the reserve
+     * @dev Only callable by the PoolConfigurator contract
+     * @dev To be used when required by the configurator, for example when updating interest rates strategy data
+     * @param asset The address of the underlying asset of the reserve
+     */
+    function syncIndexesState(address asset) external;
+
+    /**
+     * @notice Updates interest rates on the reserve data
+     * @dev Only callable by the PoolConfigurator contract
+     * @dev To be used when required by the configurator, for example when updating interest rates strategy data
+     * @param asset The address of the underlying asset of the reserve
+     */
+    function syncRatesState(address asset) external;
+
     /**
      * @notice Sets the configuration bitmap of the reserve as a whole
      * @dev Only callable by the PoolConfigurator contract
@@ -626,8 +598,26 @@ interface IPool {
      */
     function getReserveData(
         address asset
+    ) external view returns (DataTypes.ReserveDataLegacy memory);
+
+    /**
+     * @notice Returns the state and configuration of the reserve, including extra data included with Aave v3.1
+     * @param asset The address of the underlying asset of the reserve
+     * @return The state and configuration data of the reserve with virtual accounting
+     */
+    function getReserveDataExtended(
+        address asset
     ) external view returns (DataTypes.ReserveData memory);
 
+    /**
+     * @notice Returns the virtual underlying balance of the reserve
+     * @param asset The address of the underlying asset of the reserve
+     * @return The reserve virtual underlying balance
+     */
+    function getVirtualUnderlyingBalance(
+        address asset
+    ) external view returns (uint128);
+
     /**
      * @notice Validates and finalizes an aToken transfer
      * @dev Only callable by the overlying aToken of the `asset`
@@ -654,6 +644,13 @@ interface IPool {
      */
     function getReservesList() external view returns (address[] memory);
 
+    /**
+     * @notice Returns the number of initialized reserves
+     * @dev It includes dropped reserves
+     * @return The count
+     */
+    function getReservesCount() external view returns (uint256);
+
     /**
      * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct
      * @param id The id of the reserve as stored in the DataTypes.ReserveData struct
@@ -692,7 +689,7 @@ interface IPool {
     ) external;
 
     /**
-     * @notice Configures a new category for the eMode.
+     * @notice Configures a new or alters an existing collateral configuration of an eMode.
      * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.
      * The category 0 is reserved as it's the default for volatile assets
      * @param id The id of the category
@@ -700,17 +697,74 @@ interface IPool {
      */
     function configureEModeCategory(
         uint8 id,
-        DataTypes.EModeCategory memory config
+        DataTypes.EModeCategoryBaseConfiguration memory config
+    ) external;
+
+    /**
+     * @notice Replaces the current eMode collateralBitmap.
+     * @param id The id of the category
+     * @param collateralBitmap The collateralBitmap of the category
+     */
+    function configureEModeCategoryCollateralBitmap(
+        uint8 id,
+        uint128 collateralBitmap
+    ) external;
+
+    /**
+     * @notice Replaces the current eMode borrowableBitmap.
+     * @param id The id of the category
+     * @param borrowableBitmap The borrowableBitmap of the category
+     */
+    function configureEModeCategoryBorrowableBitmap(
+        uint8 id,
+        uint128 borrowableBitmap
     ) external;
 
     /**
      * @notice Returns the data of an eMode category
+     * @dev DEPRECATED use independent getters instead
      * @param id The id of the category
      * @return The configuration data of the category
      */
     function getEModeCategoryData(
         uint8 id
-    ) external view returns (DataTypes.EModeCategory memory);
+    ) external view returns (DataTypes.EModeCategoryLegacy memory);
+
+    /**
+     * @notice Returns the label of an eMode category
+     * @param id The id of the category
+     * @return The label of the category
+     */
+    function getEModeCategoryLabel(
+        uint8 id
+    ) external view returns (string memory);
+
+    /**
+     * @notice Returns the collateral config of an eMode category
+     * @param id The id of the category
+     * @return The ltv,lt,lb of the category
+     */
+    function getEModeCategoryCollateralConfig(
+        uint8 id
+    ) external view returns (DataTypes.CollateralConfig memory);
+
+    /**
+     * @notice Returns the collateralBitmap of an eMode category
+     * @param id The id of the category
+     * @return The collateralBitmap of the category
+     */
+    function getEModeCategoryCollateralBitmap(
+        uint8 id
+    ) external view returns (uint128);
+
+    /**
+     * @notice Returns the borrowableBitmap of an eMode category
+     * @param id The id of the category
+     * @return The borrowableBitmap of the category
+     */
+    function getEModeCategoryBorrowableBitmap(
+        uint8 id
+    ) external view returns (uint128);
 
     /**
      * @notice Allows a user to use the protocol in eMode
@@ -733,13 +787,20 @@ interface IPool {
     function resetIsolationModeTotalDebt(address asset) external;
 
     /**
-     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate
-     * @return The percentage of available liquidity to borrow, expressed in bps
-     */
-    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()
-        external
-        view
-        returns (uint256);
+     * @notice Sets the liquidation grace period of the given asset
+     * @dev To enable a liquidation grace period, a timestamp in the future should be set,
+     *      To disable a liquidation grace period, any timestamp in the past works, like 0
+     * @param asset The address of the underlying asset to set the liquidationGracePeriod
+     * @param until Timestamp when the liquidation grace period will end
+     **/
+    function setLiquidationGracePeriod(address asset, uint40 until) external;
+
+    /**
+     * @notice Returns the liquidation grace period of the given asset
+     * @param asset The address of the underlying asset
+     * @return Timestamp when the liquidation grace period will end
+     **/
+    function getLiquidationGracePeriod(address asset) external returns (uint40);
 
     /**
      * @notice Returns the total fee on flash loans
@@ -797,4 +858,39 @@ interface IPool {
         address onBehalfOf,
         uint16 referralCode
     ) external;
+
+    /**
+     * @notice Gets the address of the external FlashLoanLogic
+     */
+    function getFlashLoanLogic() external view returns (address);
+
+    /**
+     * @notice Gets the address of the external BorrowLogic
+     */
+    function getBorrowLogic() external view returns (address);
+
+    /**
+     * @notice Gets the address of the external BridgeLogic
+     */
+    function getBridgeLogic() external view returns (address);
+
+    /**
+     * @notice Gets the address of the external EModeLogic
+     */
+    function getEModeLogic() external view returns (address);
+
+    /**
+     * @notice Gets the address of the external LiquidationLogic
+     */
+    function getLiquidationLogic() external view returns (address);
+
+    /**
+     * @notice Gets the address of the external PoolLogic
+     */
+    function getPoolLogic() external view returns (address);
+
+    /**
+     * @notice Gets the address of the external SupplyLogic
+     */
+    function getSupplyLogic() external view returns (address);
 }
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPoolAddressesProvider.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IPoolAddressesProvider.sol
index 957e507..cf2052e 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPoolAddressesProvider.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IPoolAddressesProvider.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPoolConfigurator.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPoolConfigurator.sol
deleted file mode 100644
index 6a54828..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPoolConfigurator.sol
+++ /dev/null
@@ -1,527 +0,0 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity ^0.8.0;
-
-import {ConfiguratorInputTypes} from "../protocol/libraries/types/ConfiguratorInputTypes.sol";
-
-/**
- * @title IPoolConfigurator
- * @author Aave
- * @notice Defines the basic interface for a Pool configurator.
- */
-interface IPoolConfigurator {
-    /**
-     * @dev Emitted when a reserve is initialized.
-     * @param asset The address of the underlying asset of the reserve
-     * @param aToken The address of the associated aToken contract
-     * @param stableDebtToken The address of the associated stable rate debt token
-     * @param variableDebtToken The address of the associated variable rate debt token
-     * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve
-     */
-    event ReserveInitialized(
-        address indexed asset,
-        address indexed aToken,
-        address stableDebtToken,
-        address variableDebtToken,
-        address interestRateStrategyAddress
-    );
-
-    /**
-     * @dev Emitted when borrowing is enabled or disabled on a reserve.
-     * @param asset The address of the underlying asset of the reserve
-     * @param enabled True if borrowing is enabled, false otherwise
-     */
-    event ReserveBorrowing(address indexed asset, bool enabled);
-
-    /**
-     * @dev Emitted when flashloans are enabled or disabled on a reserve.
-     * @param asset The address of the underlying asset of the reserve
-     * @param enabled True if flashloans are enabled, false otherwise
-     */
-    event ReserveFlashLoaning(address indexed asset, bool enabled);
-
-    /**
-     * @dev Emitted when the collateralization risk parameters for the specified asset are updated.
-     * @param asset The address of the underlying asset of the reserve
-     * @param ltv The loan to value of the asset when used as collateral
-     * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized
-     * @param liquidationBonus The bonus liquidators receive to liquidate this asset
-     */
-    event CollateralConfigurationChanged(
-        address indexed asset,
-        uint256 ltv,
-        uint256 liquidationThreshold,
-        uint256 liquidationBonus
-    );
-
-    /**
-     * @dev Emitted when stable rate borrowing is enabled or disabled on a reserve
-     * @param asset The address of the underlying asset of the reserve
-     * @param enabled True if stable rate borrowing is enabled, false otherwise
-     */
-    event ReserveStableRateBorrowing(address indexed asset, bool enabled);
-
-    /**
-     * @dev Emitted when a reserve is activated or deactivated
-     * @param asset The address of the underlying asset of the reserve
-     * @param active True if reserve is active, false otherwise
-     */
-    event ReserveActive(address indexed asset, bool active);
-
-    /**
-     * @dev Emitted when a reserve is frozen or unfrozen
-     * @param asset The address of the underlying asset of the reserve
-     * @param frozen True if reserve is frozen, false otherwise
-     */
-    event ReserveFrozen(address indexed asset, bool frozen);
-
-    /**
-     * @dev Emitted when a reserve is paused or unpaused
-     * @param asset The address of the underlying asset of the reserve
-     * @param paused True if reserve is paused, false otherwise
-     */
-    event ReservePaused(address indexed asset, bool paused);
-
-    /**
-     * @dev Emitted when a reserve is dropped.
-     * @param asset The address of the underlying asset of the reserve
-     */
-    event ReserveDropped(address indexed asset);
-
-    /**
-     * @dev Emitted when a reserve factor is updated.
-     * @param asset The address of the underlying asset of the reserve
-     * @param oldReserveFactor The old reserve factor, expressed in bps
-     * @param newReserveFactor The new reserve factor, expressed in bps
-     */
-    event ReserveFactorChanged(
-        address indexed asset,
-        uint256 oldReserveFactor,
-        uint256 newReserveFactor
-    );
-
-    /**
-     * @dev Emitted when the borrow cap of a reserve is updated.
-     * @param asset The address of the underlying asset of the reserve
-     * @param oldBorrowCap The old borrow cap
-     * @param newBorrowCap The new borrow cap
-     */
-    event BorrowCapChanged(
-        address indexed asset,
-        uint256 oldBorrowCap,
-        uint256 newBorrowCap
-    );
-
-    /**
-     * @dev Emitted when the supply cap of a reserve is updated.
-     * @param asset The address of the underlying asset of the reserve
-     * @param oldSupplyCap The old supply cap
-     * @param newSupplyCap The new supply cap
-     */
-    event SupplyCapChanged(
-        address indexed asset,
-        uint256 oldSupplyCap,
-        uint256 newSupplyCap
-    );
-
-    /**
-     * @dev Emitted when the liquidation protocol fee of a reserve is updated.
-     * @param asset The address of the underlying asset of the reserve
-     * @param oldFee The old liquidation protocol fee, expressed in bps
-     * @param newFee The new liquidation protocol fee, expressed in bps
-     */
-    event LiquidationProtocolFeeChanged(
-        address indexed asset,
-        uint256 oldFee,
-        uint256 newFee
-    );
-
-    /**
-     * @dev Emitted when the unbacked mint cap of a reserve is updated.
-     * @param asset The address of the underlying asset of the reserve
-     * @param oldUnbackedMintCap The old unbacked mint cap
-     * @param newUnbackedMintCap The new unbacked mint cap
-     */
-    event UnbackedMintCapChanged(
-        address indexed asset,
-        uint256 oldUnbackedMintCap,
-        uint256 newUnbackedMintCap
-    );
-
-    /**
-     * @dev Emitted when the category of an asset in eMode is changed.
-     * @param asset The address of the underlying asset of the reserve
-     * @param oldCategoryId The old eMode asset category
-     * @param newCategoryId The new eMode asset category
-     */
-    event EModeAssetCategoryChanged(
-        address indexed asset,
-        uint8 oldCategoryId,
-        uint8 newCategoryId
-    );
-
-    /**
-     * @dev Emitted when a new eMode category is added.
-     * @param categoryId The new eMode category id
-     * @param ltv The ltv for the asset category in eMode
-     * @param liquidationThreshold The liquidationThreshold for the asset category in eMode
-     * @param liquidationBonus The liquidationBonus for the asset category in eMode
-     * @param oracle The optional address of the price oracle specific for this category
-     * @param label A human readable identifier for the category
-     */
-    event EModeCategoryAdded(
-        uint8 indexed categoryId,
-        uint256 ltv,
-        uint256 liquidationThreshold,
-        uint256 liquidationBonus,
-        address oracle,
-        string label
-    );
-
-    /**
-     * @dev Emitted when a reserve interest strategy contract is updated.
-     * @param asset The address of the underlying asset of the reserve
-     * @param oldStrategy The address of the old interest strategy contract
-     * @param newStrategy The address of the new interest strategy contract
-     */
-    event ReserveInterestRateStrategyChanged(
-        address indexed asset,
-        address oldStrategy,
-        address newStrategy
-    );
-
-    /**
-     * @dev Emitted when an aToken implementation is upgraded.
-     * @param asset The address of the underlying asset of the reserve
-     * @param proxy The aToken proxy address
-     * @param implementation The new aToken implementation
-     */
-    event ATokenUpgraded(
-        address indexed asset,
-        address indexed proxy,
-        address indexed implementation
-    );
-
-    /**
-     * @dev Emitted when the implementation of a stable debt token is upgraded.
-     * @param asset The address of the underlying asset of the reserve
-     * @param proxy The stable debt token proxy address
-     * @param implementation The new aToken implementation
-     */
-    event StableDebtTokenUpgraded(
-        address indexed asset,
-        address indexed proxy,
-        address indexed implementation
-    );
-
-    /**
-     * @dev Emitted when the implementation of a variable debt token is upgraded.
-     * @param asset The address of the underlying asset of the reserve
-     * @param proxy The variable debt token proxy address
-     * @param implementation The new aToken implementation
-     */
-    event VariableDebtTokenUpgraded(
-        address indexed asset,
-        address indexed proxy,
-        address indexed implementation
-    );
-
-    /**
-     * @dev Emitted when the debt ceiling of an asset is set.
-     * @param asset The address of the underlying asset of the reserve
-     * @param oldDebtCeiling The old debt ceiling
-     * @param newDebtCeiling The new debt ceiling
-     */
-    event DebtCeilingChanged(
-        address indexed asset,
-        uint256 oldDebtCeiling,
-        uint256 newDebtCeiling
-    );
-
-    /**
-     * @dev Emitted when the the siloed borrowing state for an asset is changed.
-     * @param asset The address of the underlying asset of the reserve
-     * @param oldState The old siloed borrowing state
-     * @param newState The new siloed borrowing state
-     */
-    event SiloedBorrowingChanged(
-        address indexed asset,
-        bool oldState,
-        bool newState
-    );
-
-    /**
-     * @dev Emitted when the bridge protocol fee is updated.
-     * @param oldBridgeProtocolFee The old protocol fee, expressed in bps
-     * @param newBridgeProtocolFee The new protocol fee, expressed in bps
-     */
-    event BridgeProtocolFeeUpdated(
-        uint256 oldBridgeProtocolFee,
-        uint256 newBridgeProtocolFee
-    );
-
-    /**
-     * @dev Emitted when the total premium on flashloans is updated.
-     * @param oldFlashloanPremiumTotal The old premium, expressed in bps
-     * @param newFlashloanPremiumTotal The new premium, expressed in bps
-     */
-    event FlashloanPremiumTotalUpdated(
-        uint128 oldFlashloanPremiumTotal,
-        uint128 newFlashloanPremiumTotal
-    );
-
-    /**
-     * @dev Emitted when the part of the premium that goes to protocol is updated.
-     * @param oldFlashloanPremiumToProtocol The old premium, expressed in bps
-     * @param newFlashloanPremiumToProtocol The new premium, expressed in bps
-     */
-    event FlashloanPremiumToProtocolUpdated(
-        uint128 oldFlashloanPremiumToProtocol,
-        uint128 newFlashloanPremiumToProtocol
-    );
-
-    /**
-     * @dev Emitted when the reserve is set as borrowable/non borrowable in isolation mode.
-     * @param asset The address of the underlying asset of the reserve
-     * @param borrowable True if the reserve is borrowable in isolation, false otherwise
-     */
-    event BorrowableInIsolationChanged(address asset, bool borrowable);
-
-    /**
-     * @notice Initializes multiple reserves.
-     * @param input The array of initialization parameters
-     */
-    function initReserves(
-        ConfiguratorInputTypes.InitReserveInput[] calldata input
-    ) external;
-
-    /**
-     * @dev Updates the aToken implementation for the reserve.
-     * @param input The aToken update parameters
-     */
-    function updateAToken(
-        ConfiguratorInputTypes.UpdateATokenInput calldata input
-    ) external;
-
-    /**
-     * @notice Updates the stable debt token implementation for the reserve.
-     * @param input The stableDebtToken update parameters
-     */
-    function updateStableDebtToken(
-        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
-    ) external;
-
-    /**
-     * @notice Updates the variable debt token implementation for the asset.
-     * @param input The variableDebtToken update parameters
-     */
-    function updateVariableDebtToken(
-        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input
-    ) external;
-
-    /**
-     * @notice Configures borrowing on a reserve.
-     * @dev Can only be disabled (set to false) if stable borrowing is disabled
-     * @param asset The address of the underlying asset of the reserve
-     * @param enabled True if borrowing needs to be enabled, false otherwise
-     */
-    function setReserveBorrowing(address asset, bool enabled) external;
-
-    /**
-     * @notice Configures the reserve collateralization parameters.
-     * @dev All the values are expressed in bps. A value of 10000, results in 100.00%
-     * @dev The `liquidationBonus` is always above 100%. A value of 105% means the liquidator will receive a 5% bonus
-     * @param asset The address of the underlying asset of the reserve
-     * @param ltv The loan to value of the asset when used as collateral
-     * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized
-     * @param liquidationBonus The bonus liquidators receive to liquidate this asset
-     */
-    function configureReserveAsCollateral(
-        address asset,
-        uint256 ltv,
-        uint256 liquidationThreshold,
-        uint256 liquidationBonus
-    ) external;
-
-    /**
-     * @notice Enable or disable stable rate borrowing on a reserve.
-     * @dev Can only be enabled (set to true) if borrowing is enabled
-     * @param asset The address of the underlying asset of the reserve
-     * @param enabled True if stable rate borrowing needs to be enabled, false otherwise
-     */
-    function setReserveStableRateBorrowing(
-        address asset,
-        bool enabled
-    ) external;
-
-    /**
-     * @notice Enable or disable flashloans on a reserve
-     * @param asset The address of the underlying asset of the reserve
-     * @param enabled True if flashloans need to be enabled, false otherwise
-     */
-    function setReserveFlashLoaning(address asset, bool enabled) external;
-
-    /**
-     * @notice Activate or deactivate a reserve
-     * @param asset The address of the underlying asset of the reserve
-     * @param active True if the reserve needs to be active, false otherwise
-     */
-    function setReserveActive(address asset, bool active) external;
-
-    /**
-     * @notice Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow
-     * or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.
-     * @param asset The address of the underlying asset of the reserve
-     * @param freeze True if the reserve needs to be frozen, false otherwise
-     */
-    function setReserveFreeze(address asset, bool freeze) external;
-
-    /**
-     * @notice Sets the borrowable in isolation flag for the reserve.
-     * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the
-     * borrowed amount will be accumulated in the isolated collateral's total debt exposure
-     * @dev Only assets of the same family (e.g. USD stablecoins) should be borrowable in isolation mode to keep
-     * consistency in the debt ceiling calculations
-     * @param asset The address of the underlying asset of the reserve
-     * @param borrowable True if the asset should be borrowable in isolation, false otherwise
-     */
-    function setBorrowableInIsolation(address asset, bool borrowable) external;
-
-    /**
-     * @notice Pauses a reserve. A paused reserve does not allow any interaction (supply, borrow, repay,
-     * swap interest rate, liquidate, atoken transfers).
-     * @param asset The address of the underlying asset of the reserve
-     * @param paused True if pausing the reserve, false if unpausing
-     */
-    function setReservePause(address asset, bool paused) external;
-
-    /**
-     * @notice Updates the reserve factor of a reserve.
-     * @param asset The address of the underlying asset of the reserve
-     * @param newReserveFactor The new reserve factor of the reserve
-     */
-    function setReserveFactor(address asset, uint256 newReserveFactor) external;
-
-    /**
-     * @notice Sets the interest rate strategy of a reserve.
-     * @param asset The address of the underlying asset of the reserve
-     * @param newRateStrategyAddress The address of the new interest strategy contract
-     */
-    function setReserveInterestRateStrategyAddress(
-        address asset,
-        address newRateStrategyAddress
-    ) external;
-
-    /**
-     * @notice Pauses or unpauses all the protocol reserves. In the paused state all the protocol interactions
-     * are suspended.
-     * @param paused True if protocol needs to be paused, false otherwise
-     */
-    function setPoolPause(bool paused) external;
-
-    /**
-     * @notice Updates the borrow cap of a reserve.
-     * @param asset The address of the underlying asset of the reserve
-     * @param newBorrowCap The new borrow cap of the reserve
-     */
-    function setBorrowCap(address asset, uint256 newBorrowCap) external;
-
-    /**
-     * @notice Updates the supply cap of a reserve.
-     * @param asset The address of the underlying asset of the reserve
-     * @param newSupplyCap The new supply cap of the reserve
-     */
-    function setSupplyCap(address asset, uint256 newSupplyCap) external;
-
-    /**
-     * @notice Updates the liquidation protocol fee of reserve.
-     * @param asset The address of the underlying asset of the reserve
-     * @param newFee The new liquidation protocol fee of the reserve, expressed in bps
-     */
-    function setLiquidationProtocolFee(address asset, uint256 newFee) external;
-
-    /**
-     * @notice Updates the unbacked mint cap of reserve.
-     * @param asset The address of the underlying asset of the reserve
-     * @param newUnbackedMintCap The new unbacked mint cap of the reserve
-     */
-    function setUnbackedMintCap(
-        address asset,
-        uint256 newUnbackedMintCap
-    ) external;
-
-    /**
-     * @notice Assign an efficiency mode (eMode) category to asset.
-     * @param asset The address of the underlying asset of the reserve
-     * @param newCategoryId The new category id of the asset
-     */
-    function setAssetEModeCategory(address asset, uint8 newCategoryId) external;
-
-    /**
-     * @notice Adds a new efficiency mode (eMode) category.
-     * @dev If zero is provided as oracle address, the default asset oracles will be used to compute the overall debt and
-     * overcollateralization of the users using this category.
-     * @dev The new ltv and liquidation threshold must be greater than the base
-     * ltvs and liquidation thresholds of all assets within the eMode category
-     * @param categoryId The id of the category to be configured
-     * @param ltv The ltv associated with the category
-     * @param liquidationThreshold The liquidation threshold associated with the category
-     * @param liquidationBonus The liquidation bonus associated with the category
-     * @param oracle The oracle associated with the category
-     * @param label A label identifying the category
-     */
-    function setEModeCategory(
-        uint8 categoryId,
-        uint16 ltv,
-        uint16 liquidationThreshold,
-        uint16 liquidationBonus,
-        address oracle,
-        string calldata label
-    ) external;
-
-    /**
-     * @notice Drops a reserve entirely.
-     * @param asset The address of the reserve to drop
-     */
-    function dropReserve(address asset) external;
-
-    /**
-     * @notice Updates the bridge fee collected by the protocol reserves.
-     * @param newBridgeProtocolFee The part of the fee sent to the protocol treasury, expressed in bps
-     */
-    function updateBridgeProtocolFee(uint256 newBridgeProtocolFee) external;
-
-    /**
-     * @notice Updates the total flash loan premium.
-     * Total flash loan premium consists of two parts:
-     * - A part is sent to aToken holders as extra balance
-     * - A part is collected by the protocol reserves
-     * @dev Expressed in bps
-     * @dev The premium is calculated on the total amount borrowed
-     * @param newFlashloanPremiumTotal The total flashloan premium
-     */
-    function updateFlashloanPremiumTotal(
-        uint128 newFlashloanPremiumTotal
-    ) external;
-
-    /**
-     * @notice Updates the flash loan premium collected by protocol reserves
-     * @dev Expressed in bps
-     * @dev The premium to protocol is calculated on the total flashloan premium
-     * @param newFlashloanPremiumToProtocol The part of the flashloan premium sent to the protocol treasury
-     */
-    function updateFlashloanPremiumToProtocol(
-        uint128 newFlashloanPremiumToProtocol
-    ) external;
-
-    /**
-     * @notice Sets the debt ceiling for an asset.
-     * @param newDebtCeiling The new debt ceiling
-     */
-    function setDebtCeiling(address asset, uint256 newDebtCeiling) external;
-
-    /**
-     * @notice Sets siloed borrowing for an asset
-     * @param siloed The new siloed borrowing state
-     */
-    function setSiloedBorrowing(address asset, bool siloed) external;
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPoolDataProvider.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPoolDataProvider.sol
deleted file mode 100644
index fa174b7..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPoolDataProvider.sol
+++ /dev/null
@@ -1,252 +0,0 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity ^0.8.0;
-
-import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
-
-/**
- * @title IPoolDataProvider
- * @author Aave
- * @notice Defines the basic interface of a PoolDataProvider
- */
-interface IPoolDataProvider {
-    struct TokenData {
-        string symbol;
-        address tokenAddress;
-    }
-
-    /**
-     * @notice Returns the address for the PoolAddressesProvider contract.
-     * @return The address for the PoolAddressesProvider contract
-     */
-    function ADDRESSES_PROVIDER()
-        external
-        view
-        returns (IPoolAddressesProvider);
-
-    /**
-     * @notice Returns the list of the existing reserves in the pool.
-     * @dev Handling MKR and ETH in a different way since they do not have standard `symbol` functions.
-     * @return The list of reserves, pairs of symbols and addresses
-     */
-    function getAllReservesTokens() external view returns (TokenData[] memory);
-
-    /**
-     * @notice Returns the list of the existing ATokens in the pool.
-     * @return The list of ATokens, pairs of symbols and addresses
-     */
-    function getAllATokens() external view returns (TokenData[] memory);
-
-    /**
-     * @notice Returns the configuration data of the reserve
-     * @dev Not returning borrow and supply caps for compatibility, nor pause flag
-     * @param asset The address of the underlying asset of the reserve
-     * @return decimals The number of decimals of the reserve
-     * @return ltv The ltv of the reserve
-     * @return liquidationThreshold The liquidationThreshold of the reserve
-     * @return liquidationBonus The liquidationBonus of the reserve
-     * @return reserveFactor The reserveFactor of the reserve
-     * @return usageAsCollateralEnabled True if the usage as collateral is enabled, false otherwise
-     * @return borrowingEnabled True if borrowing is enabled, false otherwise
-     * @return stableBorrowRateEnabled True if stable rate borrowing is enabled, false otherwise
-     * @return isActive True if it is active, false otherwise
-     * @return isFrozen True if it is frozen, false otherwise
-     */
-    function getReserveConfigurationData(
-        address asset
-    )
-        external
-        view
-        returns (
-            uint256 decimals,
-            uint256 ltv,
-            uint256 liquidationThreshold,
-            uint256 liquidationBonus,
-            uint256 reserveFactor,
-            bool usageAsCollateralEnabled,
-            bool borrowingEnabled,
-            bool stableBorrowRateEnabled,
-            bool isActive,
-            bool isFrozen
-        );
-
-    /**
-     * @notice Returns the efficiency mode category of the reserve
-     * @param asset The address of the underlying asset of the reserve
-     * @return The eMode id of the reserve
-     */
-    function getReserveEModeCategory(
-        address asset
-    ) external view returns (uint256);
-
-    /**
-     * @notice Returns the caps parameters of the reserve
-     * @param asset The address of the underlying asset of the reserve
-     * @return borrowCap The borrow cap of the reserve
-     * @return supplyCap The supply cap of the reserve
-     */
-    function getReserveCaps(
-        address asset
-    ) external view returns (uint256 borrowCap, uint256 supplyCap);
-
-    /**
-     * @notice Returns if the pool is paused
-     * @param asset The address of the underlying asset of the reserve
-     * @return isPaused True if the pool is paused, false otherwise
-     */
-    function getPaused(address asset) external view returns (bool isPaused);
-
-    /**
-     * @notice Returns the siloed borrowing flag
-     * @param asset The address of the underlying asset of the reserve
-     * @return True if the asset is siloed for borrowing
-     */
-    function getSiloedBorrowing(address asset) external view returns (bool);
-
-    /**
-     * @notice Returns the protocol fee on the liquidation bonus
-     * @param asset The address of the underlying asset of the reserve
-     * @return The protocol fee on liquidation
-     */
-    function getLiquidationProtocolFee(
-        address asset
-    ) external view returns (uint256);
-
-    /**
-     * @notice Returns the unbacked mint cap of the reserve
-     * @param asset The address of the underlying asset of the reserve
-     * @return The unbacked mint cap of the reserve
-     */
-    function getUnbackedMintCap(address asset) external view returns (uint256);
-
-    /**
-     * @notice Returns the debt ceiling of the reserve
-     * @param asset The address of the underlying asset of the reserve
-     * @return The debt ceiling of the reserve
-     */
-    function getDebtCeiling(address asset) external view returns (uint256);
-
-    /**
-     * @notice Returns the debt ceiling decimals
-     * @return The debt ceiling decimals
-     */
-    function getDebtCeilingDecimals() external pure returns (uint256);
-
-    /**
-     * @notice Returns the reserve data
-     * @param asset The address of the underlying asset of the reserve
-     * @return unbacked The amount of unbacked tokens
-     * @return accruedToTreasuryScaled The scaled amount of tokens accrued to treasury that is to be minted
-     * @return totalAToken The total supply of the aToken
-     * @return totalStableDebt The total stable debt of the reserve
-     * @return totalVariableDebt The total variable debt of the reserve
-     * @return liquidityRate The liquidity rate of the reserve
-     * @return variableBorrowRate The variable borrow rate of the reserve
-     * @return stableBorrowRate The stable borrow rate of the reserve
-     * @return averageStableBorrowRate The average stable borrow rate of the reserve
-     * @return liquidityIndex The liquidity index of the reserve
-     * @return variableBorrowIndex The variable borrow index of the reserve
-     * @return lastUpdateTimestamp The timestamp of the last update of the reserve
-     */
-    function getReserveData(
-        address asset
-    )
-        external
-        view
-        returns (
-            uint256 unbacked,
-            uint256 accruedToTreasuryScaled,
-            uint256 totalAToken,
-            uint256 totalStableDebt,
-            uint256 totalVariableDebt,
-            uint256 liquidityRate,
-            uint256 variableBorrowRate,
-            uint256 stableBorrowRate,
-            uint256 averageStableBorrowRate,
-            uint256 liquidityIndex,
-            uint256 variableBorrowIndex,
-            uint40 lastUpdateTimestamp
-        );
-
-    /**
-     * @notice Returns the total supply of aTokens for a given asset
-     * @param asset The address of the underlying asset of the reserve
-     * @return The total supply of the aToken
-     */
-    function getATokenTotalSupply(
-        address asset
-    ) external view returns (uint256);
-
-    /**
-     * @notice Returns the total debt for a given asset
-     * @param asset The address of the underlying asset of the reserve
-     * @return The total debt for asset
-     */
-    function getTotalDebt(address asset) external view returns (uint256);
-
-    /**
-     * @notice Returns the user data in a reserve
-     * @param asset The address of the underlying asset of the reserve
-     * @param user The address of the user
-     * @return currentATokenBalance The current AToken balance of the user
-     * @return currentStableDebt The current stable debt of the user
-     * @return currentVariableDebt The current variable debt of the user
-     * @return principalStableDebt The principal stable debt of the user
-     * @return scaledVariableDebt The scaled variable debt of the user
-     * @return stableBorrowRate The stable borrow rate of the user
-     * @return liquidityRate The liquidity rate of the reserve
-     * @return stableRateLastUpdated The timestamp of the last update of the user stable rate
-     * @return usageAsCollateralEnabled True if the user is using the asset as collateral, false
-     *         otherwise
-     */
-    function getUserReserveData(
-        address asset,
-        address user
-    )
-        external
-        view
-        returns (
-            uint256 currentATokenBalance,
-            uint256 currentStableDebt,
-            uint256 currentVariableDebt,
-            uint256 principalStableDebt,
-            uint256 scaledVariableDebt,
-            uint256 stableBorrowRate,
-            uint256 liquidityRate,
-            uint40 stableRateLastUpdated,
-            bool usageAsCollateralEnabled
-        );
-
-    /**
-     * @notice Returns the token addresses of the reserve
-     * @param asset The address of the underlying asset of the reserve
-     * @return aTokenAddress The AToken address of the reserve
-     * @return stableDebtTokenAddress The StableDebtToken address of the reserve
-     * @return variableDebtTokenAddress The VariableDebtToken address of the reserve
-     */
-    function getReserveTokensAddresses(
-        address asset
-    )
-        external
-        view
-        returns (
-            address aTokenAddress,
-            address stableDebtTokenAddress,
-            address variableDebtTokenAddress
-        );
-
-    /**
-     * @notice Returns the address of the Interest Rate strategy
-     * @param asset The address of the underlying asset of the reserve
-     * @return irStrategyAddress The address of the Interest Rate strategy
-     */
-    function getInterestRateStrategyAddress(
-        address asset
-    ) external view returns (address irStrategyAddress);
-
-    /**
-     * @notice Returns whether the reserve has FlashLoans enabled or disabled
-     * @param asset The address of the underlying asset of the reserve
-     * @return True if FlashLoans are enabled, false otherwise
-     */
-    function getFlashLoanEnabled(address asset) external view returns (bool);
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPriceOracleGetter.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IPriceOracleGetter.sol
index 1d53e8b..f6f8b0c 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IPriceOracleGetter.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IPriceOracleGetter.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IReserveInterestRateStrategy.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IReserveInterestRateStrategy.sol
index 4dfc108..338d93a 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IReserveInterestRateStrategy.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IReserveInterestRateStrategy.sol
@@ -1,22 +1,32 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {DataTypes} from "../protocol/libraries/types/DataTypes.sol";
 
 /**
  * @title IReserveInterestRateStrategy
- * @author Aave
- * @notice Interface for the calculation of the interest rates
+ * @author BGD Labs
+ * @notice Basic interface for any rate strategy used by the Aave protocol
  */
 interface IReserveInterestRateStrategy {
+    /**
+     * @notice Sets interest rate data for an Aave rate strategy
+     * @param reserve The reserve to update
+     * @param rateData The abi encoded reserve interest rate data to apply to the given reserve
+     *   Abstracted this way as rate strategies can be custom
+     */
+    function setInterestRateParams(
+        address reserve,
+        bytes calldata rateData
+    ) external;
+
     /**
      * @notice Calculates the interest rates depending on the reserve's state and configurations
      * @param params The parameters needed to calculate interest rates
-     * @return liquidityRate The liquidity rate expressed in rays
-     * @return stableBorrowRate The stable borrow rate expressed in rays
-     * @return variableBorrowRate The variable borrow rate expressed in rays
+     * @return liquidityRate The liquidity rate expressed in ray
+     * @return variableBorrowRate The variable borrow rate expressed in ray
      */
     function calculateInterestRates(
         DataTypes.CalculateInterestRatesParams memory params
-    ) external view returns (uint256, uint256, uint256);
+    ) external view returns (uint256, uint256);
 }
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IScaledBalanceToken.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IScaledBalanceToken.sol
index dad7fee..3d9c0e2 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IScaledBalanceToken.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IScaledBalanceToken.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IStableDebtToken.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IStableDebtToken.sol
deleted file mode 100644
index 7e4b84e..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IStableDebtToken.sol
+++ /dev/null
@@ -1,148 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
-
-import {IInitializableDebtToken} from "./IInitializableDebtToken.sol";
-
-/**
- * @title IStableDebtToken
- * @author Aave
- * @notice Defines the interface for the stable debt token
- * @dev It does not inherit from IERC20 to save in code size
- */
-interface IStableDebtToken is IInitializableDebtToken {
-    /**
-     * @dev Emitted when new stable debt is minted
-     * @param user The address of the user who triggered the minting
-     * @param onBehalfOf The recipient of stable debt tokens
-     * @param amount The amount minted (user entered amount + balance increase from interest)
-     * @param currentBalance The balance of the user based on the previous balance and balance increase from interest
-     * @param balanceIncrease The increase in balance since the last action of the user 'onBehalfOf'
-     * @param newRate The rate of the debt after the minting
-     * @param avgStableRate The next average stable rate after the minting
-     * @param newTotalSupply The next total supply of the stable debt token after the action
-     */
-    event Mint(
-        address indexed user,
-        address indexed onBehalfOf,
-        uint256 amount,
-        uint256 currentBalance,
-        uint256 balanceIncrease,
-        uint256 newRate,
-        uint256 avgStableRate,
-        uint256 newTotalSupply
-    );
-
-    /**
-     * @dev Emitted when new stable debt is burned
-     * @param from The address from which the debt will be burned
-     * @param amount The amount being burned (user entered amount - balance increase from interest)
-     * @param currentBalance The balance of the user based on the previous balance and balance increase from interest
-     * @param balanceIncrease The increase in balance since the last action of 'from'
-     * @param avgStableRate The next average stable rate after the burning
-     * @param newTotalSupply The next total supply of the stable debt token after the action
-     */
-    event Burn(
-        address indexed from,
-        uint256 amount,
-        uint256 currentBalance,
-        uint256 balanceIncrease,
-        uint256 avgStableRate,
-        uint256 newTotalSupply
-    );
-
-    /**
-     * @notice Mints debt token to the `onBehalfOf` address.
-     * @dev The resulting rate is the weighted average between the rate of the new debt
-     * and the rate of the previous debt
-     * @param user The address receiving the borrowed underlying, being the delegatee in case
-     * of credit delegate, or same as `onBehalfOf` otherwise
-     * @param onBehalfOf The address receiving the debt tokens
-     * @param amount The amount of debt tokens to mint
-     * @param rate The rate of the debt being minted
-     * @return True if it is the first borrow, false otherwise
-     * @return The total stable debt
-     * @return The average stable borrow rate
-     */
-    function mint(
-        address user,
-        address onBehalfOf,
-        uint256 amount,
-        uint256 rate
-    ) external returns (bool, uint256, uint256);
-
-    /**
-     * @notice Burns debt of `user`
-     * @dev The resulting rate is the weighted average between the rate of the new debt
-     * and the rate of the previous debt
-     * @dev In some instances, a burn transaction will emit a mint event
-     * if the amount to burn is less than the interest the user earned
-     * @param from The address from which the debt will be burned
-     * @param amount The amount of debt tokens getting burned
-     * @return The total stable debt
-     * @return The average stable borrow rate
-     */
-    function burn(
-        address from,
-        uint256 amount
-    ) external returns (uint256, uint256);
-
-    /**
-     * @notice Returns the average rate of all the stable rate loans.
-     * @return The average stable rate
-     */
-    function getAverageStableRate() external view returns (uint256);
-
-    /**
-     * @notice Returns the stable rate of the user debt
-     * @param user The address of the user
-     * @return The stable rate of the user
-     */
-    function getUserStableRate(address user) external view returns (uint256);
-
-    /**
-     * @notice Returns the timestamp of the last update of the user
-     * @param user The address of the user
-     * @return The timestamp
-     */
-    function getUserLastUpdated(address user) external view returns (uint40);
-
-    /**
-     * @notice Returns the principal, the total supply, the average stable rate and the timestamp for the last update
-     * @return The principal
-     * @return The total supply
-     * @return The average stable rate
-     * @return The timestamp of the last update
-     */
-    function getSupplyData()
-        external
-        view
-        returns (uint256, uint256, uint256, uint40);
-
-    /**
-     * @notice Returns the timestamp of the last update of the total supply
-     * @return The timestamp
-     */
-    function getTotalSupplyLastUpdated() external view returns (uint40);
-
-    /**
-     * @notice Returns the total supply and the average stable rate
-     * @return The total supply
-     * @return The average rate
-     */
-    function getTotalSupplyAndAvgRate()
-        external
-        view
-        returns (uint256, uint256);
-
-    /**
-     * @notice Returns the principal debt balance of the user
-     * @return The debt balance of the user since the last burn/mint action
-     */
-    function principalBalanceOf(address user) external view returns (uint256);
-
-    /**
-     * @notice Returns the address of the underlying asset of this stableDebtToken (E.g. WETH for stableDebtWETH)
-     * @return The address of the underlying asset
-     */
-    function UNDERLYING_ASSET_ADDRESS() external view returns (address);
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IncentivizedERC20.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IncentivizedERC20.sol
index 457a5af..d1d7619 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/IncentivizedERC20.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/IncentivizedERC20.sol
@@ -46,8 +46,7 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
     /**
      * @dev UserState - additionalData is a flexible field.
      * ATokens and VariableDebtTokens use this field store the index of the
-     * user's last supply/withdrawal/borrow/repayment. StableDebtTokens use
-     * this field to store the user's stable rate.
+     * user's last supply/withdrawal/borrow/repayment.
      */
     struct UserState {
         uint128 balance;
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/LiquidationLogic.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/LiquidationLogic.sol
index 7dc4f81..51793b6 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/LiquidationLogic.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/LiquidationLogic.sol
@@ -5,7 +5,6 @@ import {IERC20} from "../../../dependencies/openzeppelin/contracts//IERC20.sol";
 import {GPv2SafeERC20} from "../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol";
 import {PercentageMath} from "../../libraries/math/PercentageMath.sol";
 import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
-import {Helpers} from "../../libraries/helpers/Helpers.sol";
 import {DataTypes} from "../../libraries/types/DataTypes.sol";
 import {ReserveLogic} from "./ReserveLogic.sol";
 import {ValidationLogic} from "./ValidationLogic.sol";
@@ -14,8 +13,8 @@ import {IsolationModeLogic} from "./IsolationModeLogic.sol";
 import {EModeLogic} from "./EModeLogic.sol";
 import {UserConfiguration} from "../../libraries/configuration/UserConfiguration.sol";
 import {ReserveConfiguration} from "../../libraries/configuration/ReserveConfiguration.sol";
+import {EModeConfiguration} from "../../libraries/configuration/EModeConfiguration.sol";
 import {IAToken} from "../../../interfaces/IAToken.sol";
-import {IStableDebtToken} from "../../../interfaces/IStableDebtToken.sol";
 import {IVariableDebtToken} from "../../../interfaces/IVariableDebtToken.sol";
 import {IPriceOracleGetter} from "../../../interfaces/IPriceOracleGetter.sol";
 
@@ -75,15 +74,12 @@ library LiquidationLogic {
 
     struct LiquidationCallLocalVars {
         uint256 userCollateralBalance;
-        uint256 userVariableDebt;
         uint256 userTotalDebt;
         uint256 actualDebtToLiquidate;
         uint256 actualCollateralToLiquidate;
         uint256 liquidationBonus;
         uint256 healthFactor;
         uint256 liquidationProtocolFeeAmount;
-        address collateralPriceSource;
-        address debtPriceSource;
         IAToken collateralAToken;
         DataTypes.ReserveCache debtReserveCache;
     }
@@ -133,11 +129,11 @@ library LiquidationLogic {
             })
         );
 
-        (
-            vars.userVariableDebt,
-            vars.userTotalDebt,
-            vars.actualDebtToLiquidate
-        ) = _calculateDebt(vars.debtReserveCache, params, vars.healthFactor);
+        (vars.userTotalDebt, vars.actualDebtToLiquidate) = _calculateDebt(
+            vars.debtReserveCache,
+            params,
+            vars.healthFactor
+        );
 
         ValidationLogic.validateLiquidationCall(
             userConfig,
@@ -151,12 +147,21 @@ library LiquidationLogic {
             })
         );
 
-        (
-            vars.collateralAToken,
-            vars.collateralPriceSource,
-            vars.debtPriceSource,
-            vars.liquidationBonus
-        ) = _getConfigurationData(eModeCategories, collateralReserve, params);
+        vars.collateralAToken = IAToken(collateralReserve.aTokenAddress);
+        if (
+            params.userEModeCategory != 0 &&
+            EModeConfiguration.isReserveEnabledOnBitmap(
+                eModeCategories[params.userEModeCategory].collateralBitmap,
+                collateralReserve.id
+            )
+        ) {
+            vars.liquidationBonus = eModeCategories[params.userEModeCategory]
+                .liquidationBonus;
+        } else {
+            vars.liquidationBonus = collateralReserve
+                .configuration
+                .getLiquidationBonus();
+        }
 
         vars.userCollateralBalance = vars.collateralAToken.balanceOf(
             params.user
@@ -169,8 +174,8 @@ library LiquidationLogic {
         ) = _calculateAvailableCollateralToLiquidate(
             collateralReserve,
             vars.debtReserveCache,
-            vars.collateralPriceSource,
-            vars.debtPriceSource,
+            params.collateralAsset,
+            params.debtAsset,
             vars.actualDebtToLiquidate,
             vars.userCollateralBalance,
             vars.liquidationBonus,
@@ -362,36 +367,13 @@ library LiquidationLogic {
         DataTypes.ExecuteLiquidationCallParams memory params,
         LiquidationCallLocalVars memory vars
     ) internal {
-        if (vars.userVariableDebt >= vars.actualDebtToLiquidate) {
-            vars.debtReserveCache.nextScaledVariableDebt = IVariableDebtToken(
-                vars.debtReserveCache.variableDebtTokenAddress
-            ).burn(
-                    params.user,
-                    vars.actualDebtToLiquidate,
-                    vars.debtReserveCache.nextVariableBorrowIndex
-                );
-        } else {
-            // If the user doesn't have variable debt, no need to try to burn variable debt tokens
-            if (vars.userVariableDebt != 0) {
-                vars
-                    .debtReserveCache
-                    .nextScaledVariableDebt = IVariableDebtToken(
-                    vars.debtReserveCache.variableDebtTokenAddress
-                ).burn(
-                        params.user,
-                        vars.userVariableDebt,
-                        vars.debtReserveCache.nextVariableBorrowIndex
-                    );
-            }
-            (
-                vars.debtReserveCache.nextTotalStableDebt,
-                vars.debtReserveCache.nextAvgStableBorrowRate
-            ) = IStableDebtToken(vars.debtReserveCache.stableDebtTokenAddress)
-                .burn(
-                    params.user,
-                    vars.actualDebtToLiquidate - vars.userVariableDebt
-                );
-        }
+        vars.debtReserveCache.nextScaledVariableDebt = IVariableDebtToken(
+            vars.debtReserveCache.variableDebtTokenAddress
+        ).burn(
+                params.user,
+                vars.actualDebtToLiquidate,
+                vars.debtReserveCache.nextVariableBorrowIndex
+            );
     }
 
     /**
@@ -401,7 +383,6 @@ library LiquidationLogic {
      * @param debtReserveCache The reserve cache data object of the debt reserve
      * @param params The additional parameters needed to execute the liquidation function
      * @param healthFactor The health factor of the position
-     * @return The variable debt of the user
      * @return The total debt of the user
      * @return The actual debt to liquidate as a function of the closeFactor
      */
@@ -409,78 +390,22 @@ library LiquidationLogic {
         DataTypes.ReserveCache memory debtReserveCache,
         DataTypes.ExecuteLiquidationCallParams memory params,
         uint256 healthFactor
-    ) internal view returns (uint256, uint256, uint256) {
-        (uint256 userStableDebt, uint256 userVariableDebt) = Helpers
-            .getUserCurrentDebt(params.user, debtReserveCache);
-
-        uint256 userTotalDebt = userStableDebt + userVariableDebt;
+    ) internal view returns (uint256, uint256) {
+        uint256 userVariableDebt = IERC20(
+            debtReserveCache.variableDebtTokenAddress
+        ).balanceOf(params.user);
 
         uint256 closeFactor = healthFactor > CLOSE_FACTOR_HF_THRESHOLD
             ? DEFAULT_LIQUIDATION_CLOSE_FACTOR
             : MAX_LIQUIDATION_CLOSE_FACTOR;
 
-        uint256 maxLiquidatableDebt = userTotalDebt.percentMul(closeFactor);
+        uint256 maxLiquidatableDebt = userVariableDebt.percentMul(closeFactor);
 
         uint256 actualDebtToLiquidate = params.debtToCover > maxLiquidatableDebt
             ? maxLiquidatableDebt
             : params.debtToCover;
 
-        return (userVariableDebt, userTotalDebt, actualDebtToLiquidate);
-    }
-
-    /**
-     * @notice Returns the configuration data for the debt and the collateral reserves.
-     * @param eModeCategories The configuration of all the efficiency mode categories
-     * @param collateralReserve The data of the collateral reserve
-     * @param params The additional parameters needed to execute the liquidation function
-     * @return The collateral aToken
-     * @return The address to use as price source for the collateral
-     * @return The address to use as price source for the debt
-     * @return The liquidation bonus to apply to the collateral
-     */
-    function _getConfigurationData(
-        mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
-        DataTypes.ReserveData storage collateralReserve,
-        DataTypes.ExecuteLiquidationCallParams memory params
-    ) internal view returns (IAToken, address, address, uint256) {
-        IAToken collateralAToken = IAToken(collateralReserve.aTokenAddress);
-        uint256 liquidationBonus = collateralReserve
-            .configuration
-            .getLiquidationBonus();
-
-        address collateralPriceSource = params.collateralAsset;
-        address debtPriceSource = params.debtAsset;
-
-        if (params.userEModeCategory != 0) {
-            address eModePriceSource = eModeCategories[params.userEModeCategory]
-                .priceSource;
-
-            if (
-                EModeLogic.isInEModeCategory(
-                    params.userEModeCategory,
-                    collateralReserve.configuration.getEModeCategory()
-                )
-            ) {
-                liquidationBonus = eModeCategories[params.userEModeCategory]
-                    .liquidationBonus;
-
-                if (eModePriceSource != address(0)) {
-                    collateralPriceSource = eModePriceSource;
-                }
-            }
-
-            // when in eMode, debt will always be in the same eMode category, can skip matching category check
-            if (eModePriceSource != address(0)) {
-                debtPriceSource = eModePriceSource;
-            }
-        }
-
-        return (
-            collateralAToken,
-            collateralPriceSource,
-            debtPriceSource,
-            liquidationBonus
-        );
+        return (userVariableDebt, actualDebtToLiquidate);
     }
 
     struct AvailableCollateralToLiquidateLocalVars {
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/Pool.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/Pool.sol
index ab97ad7..d46f444 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/Pool.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/Pool.sol
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: BUSL-1.1
 pragma solidity ^0.8.10;
 
-import {VersionedInitializable} from "../libraries/aave-upgradeability/VersionedInitializable.sol";
+import {VersionedInitializable} from "../../misc/aave-upgradeability/VersionedInitializable.sol";
 import {Errors} from "../libraries/helpers/Errors.sol";
 import {ReserveConfiguration} from "../libraries/configuration/ReserveConfiguration.sol";
 import {PoolLogic} from "../libraries/logic/PoolLogic.sol";
@@ -28,8 +28,7 @@ import {PoolStorage} from "./PoolStorage.sol";
  *   # Withdraw
  *   # Borrow
  *   # Repay
- *   # Swap their loans between variable and stable rate
- *   # Enable/disable their supplied assets as collateral rebalance stable rate borrow positions
+ *   # Enable/disable their supplied assets as collateral
  *   # Liquidate positions
  *   # Execute Flash Loans
  * @dev To be covered by a proxy contract, owned by the PoolAddressesProvider of the specific market
@@ -240,7 +239,6 @@ abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
                 interestRateMode: DataTypes.InterestRateMode(interestRateMode),
                 referralCode: referralCode,
                 releaseUnderlying: true,
-                maxStableRateBorrowSizePercent: _maxStableRateBorrowSizePercent,
                 reservesCount: _reservesCount,
                 oracle: ADDRESSES_PROVIDER.getPriceOracle(),
                 userEModeCategory: _usersEModeCategory[onBehalfOf],
@@ -340,46 +338,6 @@ abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
             );
     }
 
-    /// @inheritdoc IPool
-    function swapBorrowRateMode(
-        address asset,
-        uint256 interestRateMode
-    ) public virtual override {
-        BorrowLogic.executeSwapBorrowRateMode(
-            _reserves[asset],
-            _usersConfig[msg.sender],
-            asset,
-            msg.sender,
-            DataTypes.InterestRateMode(interestRateMode)
-        );
-    }
-
-    /// @inheritdoc IPool
-    function swapToVariable(
-        address asset,
-        address user
-    ) public virtual override {
-        BorrowLogic.executeSwapBorrowRateMode(
-            _reserves[asset],
-            _usersConfig[user],
-            asset,
-            user,
-            DataTypes.InterestRateMode.STABLE
-        );
-    }
-
-    /// @inheritdoc IPool
-    function rebalanceStableBorrowRate(
-        address asset,
-        address user
-    ) public virtual override {
-        BorrowLogic.executeRebalanceStableBorrowRate(
-            _reserves[asset],
-            asset,
-            user
-        );
-    }
-
     /// @inheritdoc IPool
     function setUserUseReserveAsCollateral(
         address asset,
@@ -446,7 +404,6 @@ abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
                 referralCode: referralCode,
                 flashLoanPremiumToProtocol: _flashLoanPremiumToProtocol,
                 flashLoanPremiumTotal: _flashLoanPremiumTotal,
-                maxStableRateBorrowSizePercent: _maxStableRateBorrowSizePercent,
                 reservesCount: _reservesCount,
                 addressesProvider: address(ADDRESSES_PROVIDER),
                 pool: address(this),
@@ -518,11 +475,9 @@ abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
         res.currentLiquidityRate = reserve.currentLiquidityRate;
         res.variableBorrowIndex = reserve.variableBorrowIndex;
         res.currentVariableBorrowRate = reserve.currentVariableBorrowRate;
-        res.currentStableBorrowRate = reserve.currentStableBorrowRate;
         res.lastUpdateTimestamp = reserve.lastUpdateTimestamp;
         res.id = reserve.id;
         res.aTokenAddress = reserve.aTokenAddress;
-        res.stableDebtTokenAddress = reserve.stableDebtTokenAddress;
         res.variableDebtTokenAddress = reserve.variableDebtTokenAddress;
         res.interestRateStrategyAddress = reserve.interestRateStrategyAddress;
         res.accruedToTreasury = reserve.accruedToTreasury;
@@ -653,17 +608,6 @@ abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
         return _reservesList[id];
     }
 
-    /// @inheritdoc IPool
-    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()
-        public
-        view
-        virtual
-        override
-        returns (uint256)
-    {
-        return _maxStableRateBorrowSizePercent;
-    }
-
     /// @inheritdoc IPool
     function BRIDGE_PROTOCOL_FEE()
         public
@@ -744,7 +688,6 @@ abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
     function initReserve(
         address asset,
         address aTokenAddress,
-        address stableDebtAddress,
         address variableDebtAddress,
         address interestRateStrategyAddress
     ) external virtual override onlyPoolConfigurator {
@@ -755,7 +698,6 @@ abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
                 DataTypes.InitReserveParams({
                     asset: asset,
                     aTokenAddress: aTokenAddress,
-                    stableDebtAddress: stableDebtAddress,
                     variableDebtAddress: variableDebtAddress,
                     interestRateStrategyAddress: interestRateStrategyAddress,
                     reservesCount: _reservesCount,
@@ -846,18 +788,89 @@ abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
     /// @inheritdoc IPool
     function configureEModeCategory(
         uint8 id,
-        DataTypes.EModeCategory memory category
+        DataTypes.EModeCategoryBaseConfiguration memory category
+    ) external virtual override onlyPoolConfigurator {
+        // category 0 is reserved for volatile heterogeneous assets and it's always disabled
+        require(id != 0, Errors.EMODE_CATEGORY_RESERVED);
+        _eModeCategories[id].ltv = category.ltv;
+        _eModeCategories[id].liquidationThreshold = category
+            .liquidationThreshold;
+        _eModeCategories[id].liquidationBonus = category.liquidationBonus;
+        _eModeCategories[id].label = category.label;
+    }
+
+    /// @inheritdoc IPool
+    function configureEModeCategoryCollateralBitmap(
+        uint8 id,
+        uint128 collateralBitmap
     ) external virtual override onlyPoolConfigurator {
         // category 0 is reserved for volatile heterogeneous assets and it's always disabled
         require(id != 0, Errors.EMODE_CATEGORY_RESERVED);
-        _eModeCategories[id] = category;
+        _eModeCategories[id].collateralBitmap = collateralBitmap;
+    }
+
+    /// @inheritdoc IPool
+    function configureEModeCategoryBorrowableBitmap(
+        uint8 id,
+        uint128 borrowableBitmap
+    ) external virtual override onlyPoolConfigurator {
+        // category 0 is reserved for volatile heterogeneous assets and it's always disabled
+        require(id != 0, Errors.EMODE_CATEGORY_RESERVED);
+        _eModeCategories[id].borrowableBitmap = borrowableBitmap;
     }
 
     /// @inheritdoc IPool
     function getEModeCategoryData(
         uint8 id
-    ) external view virtual override returns (DataTypes.EModeCategory memory) {
-        return _eModeCategories[id];
+    )
+        external
+        view
+        virtual
+        override
+        returns (DataTypes.EModeCategoryLegacy memory)
+    {
+        DataTypes.EModeCategory memory category = _eModeCategories[id];
+        return
+            DataTypes.EModeCategoryLegacy({
+                ltv: category.ltv,
+                liquidationThreshold: category.liquidationThreshold,
+                liquidationBonus: category.liquidationBonus,
+                priceSource: address(0),
+                label: category.label
+            });
+    }
+
+    /// @inheritdoc IPool
+    function getEModeCategoryCollateralConfig(
+        uint8 id
+    ) external view returns (DataTypes.CollateralConfig memory) {
+        return
+            DataTypes.CollateralConfig({
+                ltv: _eModeCategories[id].ltv,
+                liquidationThreshold: _eModeCategories[id].liquidationThreshold,
+                liquidationBonus: _eModeCategories[id].liquidationBonus
+            });
+    }
+
+    /// @inheritdoc IPool
+    function getEModeCategoryLabel(
+        uint8 id
+    ) external view returns (string memory) {
+        return _eModeCategories[id].label;
+    }
+
+    /// @inheritdoc IPool
+    function getEModeCategoryCollateralBitmap(
+        uint8 id
+    ) external view returns (uint128) {
+        return _eModeCategories[id].collateralBitmap;
+    }
+
+    /// @inheritdoc IPool
+    function getEModeCategoryBorrowableBitmap(
+        uint8 id
+    ) external view returns (uint128) {
+        return _eModeCategories[id].borrowableBitmap;
     }
 
     /// @inheritdoc IPool
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolInstance.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/PoolInstance.sol
index 121d18a..31d76b6 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolInstance.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/PoolInstance.sol
@@ -1,22 +1,16 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-import {Pool} from "../contracts/protocol/pool/Pool.sol";
-import {IPoolAddressesProvider} from "../contracts/interfaces/IPoolAddressesProvider.sol";
-import {Errors} from "../contracts/protocol/libraries/helpers/Errors.sol";
+import {PoolInstance} from "aave-v3-origin/contracts/instances/PoolInstance.sol";
+import {IPoolAddressesProvider, Errors} from "aave-v3-origin/contracts/protocol/pool/Pool.sol";
+import {CustomInitialize} from "./CustomInitialize.sol";
 
-contract PoolInstance is Pool {
-    uint256 public constant POOL_REVISION = 4;
+/**
+ * @notice Pool instance
+ */
+contract PoolInstance3_2 is PoolInstance {
+    constructor(IPoolAddressesProvider provider) PoolInstance(provider) {}
 
-    constructor(IPoolAddressesProvider provider) Pool(provider) {}
-
-    /**
-     * @notice Initializes the Pool.
-     * @dev Function is invoked by the proxy contract when the Pool contract is added to the
-     * PoolAddressesProvider of the market.
-     * @dev Caching the address of the PoolAddressesProvider in order to reduce gas consumption on subsequent operations
-     * @param provider The address of the PoolAddressesProvider
-     */
     function initialize(
         IPoolAddressesProvider provider
     ) external virtual override initializer {
@@ -24,10 +18,6 @@ contract PoolInstance is Pool {
             provider == ADDRESSES_PROVIDER,
             Errors.INVALID_ADDRESSES_PROVIDER
         );
-        _maxStableRateBorrowSizePercent = 0.25e4;
-    }
-
-    function getRevision() internal pure virtual override returns (uint256) {
-        return POOL_REVISION;
+        CustomInitialize.initialize(_reservesCount, _reservesList, _reserves);
     }
 }
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolInstanceWithCustomInitialize.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolInstanceWithCustomInitialize.sol
deleted file mode 100644
index ece3f01..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolInstanceWithCustomInitialize.sol
+++ /dev/null
@@ -1,28 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
-
-import {PoolInstance} from "aave-v3-origin/core/instances/PoolInstance.sol";
-import {IPoolAddressesProvider, Errors} from "aave-v3-origin/core/contracts/protocol/pool/Pool.sol";
-
-import {PoolRevisionFourInitialize} from "./PoolRevisionFourInitialize.sol";
-
-/**
- * @notice Pool instance with custom initialize for existing pools
- */
-contract PoolInstanceWithCustomInitialize is PoolInstance {
-    constructor(IPoolAddressesProvider provider) PoolInstance(provider) {}
-
-    function initialize(
-        IPoolAddressesProvider provider
-    ) external virtual override initializer {
-        require(
-            provider == ADDRESSES_PROVIDER,
-            Errors.INVALID_ADDRESSES_PROVIDER
-        );
-        PoolRevisionFourInitialize.initialize(
-            _reservesCount,
-            _reservesList,
-            _reserves
-        );
-    }
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolLogic.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/PoolLogic.sol
index ec1cc3c..5dd80d3 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolLogic.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/PoolLogic.sol
@@ -46,7 +46,6 @@ library PoolLogic {
         require(Address.isContract(params.asset), Errors.NOT_CONTRACT);
         reservesData[params.asset].init(
             params.aTokenAddress,
-            params.stableDebtAddress,
             params.variableDebtAddress,
             params.interestRateStrategyAddress
         );
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolRevisionFourInitialize.sol b/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolRevisionFourInitialize.sol
deleted file mode 100644
index 421acfb..0000000
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolRevisionFourInitialize.sol
+++ /dev/null
@@ -1,72 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
-import {DataTypes} from "aave-v3-origin/core/contracts/protocol/pool/Pool.sol";
-import {IERC20} from "aave-v3-origin/core/contracts/dependencies/openzeppelin/contracts/IERC20.sol";
-import {SafeCast} from "aave-v3-origin/core/contracts/dependencies/openzeppelin/contracts/SafeCast.sol";
-import {WadRayMath} from "aave-v3-origin/core/contracts/protocol/libraries/math/WadRayMath.sol";
-import {MathUtils} from "aave-v3-origin/core/contracts/protocol/libraries/math/MathUtils.sol";
-import {ReserveConfiguration} from "aave-v3-origin/core/contracts/protocol/libraries/configuration/ReserveConfiguration.sol";
-import {ReserveLogic} from "aave-v3-origin/core/contracts/protocol/libraries/logic/ReserveLogic.sol";
-
-import {AaveV3EthereumAssets} from "aave-address-book/AaveV3Ethereum.sol";
-
-library PoolRevisionFourInitialize {
-    using ReserveLogic for DataTypes.ReserveCache;
-    using ReserveLogic for DataTypes.ReserveData;
-    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
-
-    function initialize(
-        uint256 reservesCount,
-        mapping(uint256 => address) storage _reservesList,
-        mapping(address => DataTypes.ReserveData) storage _reserves
-    ) external {
-        for (uint256 i = 0; i < reservesCount; i++) {
-            address currentReserveAddress = _reservesList[i];
-            // if this reserve was dropped already - skip
-            // GHO is the special case
-            if (
-                currentReserveAddress == address(0) ||
-                currentReserveAddress == AaveV3EthereumAssets.GHO_UNDERLYING
-            ) {
-                continue;
-            }
-
-            DataTypes.ReserveData storage currentReserve = _reserves[
-                currentReserveAddress
-            ];
-            DataTypes.ReserveCache memory reserveCache = currentReserve.cache();
-            currentReserve.updateState(reserveCache);
-
-            uint256 balanceOfUnderlying = IERC20(currentReserveAddress)
-                .balanceOf(reserveCache.aTokenAddress);
-            uint256 aTokenTotalSupply = IERC20(reserveCache.aTokenAddress)
-                .totalSupply();
-            uint256 vTokenTotalSupply = IERC20(
-                reserveCache.variableDebtTokenAddress
-            ).totalSupply();
-            uint256 sTokenTotalSupply = IERC20(
-                reserveCache.stableDebtTokenAddress
-            ).totalSupply();
-
-            // calculate current accruedToTreasury
-            uint256 accruedToTreasury = WadRayMath.rayMul(
-                currentReserve.accruedToTreasury,
-                reserveCache.nextLiquidityIndex
-            );
-
-            uint256 currentVirtualBalance = (aTokenTotalSupply +
-                accruedToTreasury) - (sTokenTotalSupply + vTokenTotalSupply);
-            if (balanceOfUnderlying < currentVirtualBalance) {
-                currentVirtualBalance = balanceOfUnderlying;
-            }
-            currentReserve.virtualUnderlyingBalance = SafeCast.toUint128(
-                currentVirtualBalance
-            );
-
-            DataTypes.ReserveConfigurationMap
-                memory currentConfiguration = currentReserve.configuration;
-            currentConfiguration.setVirtualAccActive(true);
-            currentReserve.configuration = currentConfiguration;
-        }
-    }
-}
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolStorage.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/PoolStorage.sol
index 4b03aa0..8db79fe 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/PoolStorage.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/PoolStorage.sol
@@ -43,8 +43,8 @@ contract PoolStorage {
     // FlashLoan premium paid to protocol treasury, expressed in bps
     uint128 internal _flashLoanPremiumToProtocol;
 
-    // Available liquidity that can be borrowed at once at stable rate, expressed in bps
-    uint64 internal _maxStableRateBorrowSizePercent;
+    // DEPRECATED on v3.2.0
+    uint64 internal __DEPRECATED_maxStableRateBorrowSizePercent;
 
     // Maximum number of active reserves there have been in the protocol. It is the upper bound of the reserves list
     uint16 internal _reservesCount;
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ReserveConfiguration.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/ReserveConfiguration.sol
index 0a37b4b..fc8bcf4 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ReserveConfiguration.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/ReserveConfiguration.sol
@@ -17,7 +17,6 @@ library ReserveConfiguration {
     uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore
@@ -26,7 +25,7 @@ library ReserveConfiguration {
     uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
+    //@notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
     uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant VIRTUAL_ACC_ACTIVE_MASK =        0xEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
@@ -38,7 +37,6 @@ library ReserveConfiguration {
     uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;
     uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;
     uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;
-    uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;
     uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;
     uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;
     uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;
@@ -47,7 +45,7 @@ library ReserveConfiguration {
     uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;
     uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;
     uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;
-    uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;
+    //@notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
     uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;
     uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;
     uint256 internal constant VIRTUAL_ACC_START_BIT_POSITION = 252;
@@ -60,7 +58,6 @@ library ReserveConfiguration {
     uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;
     uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;
     uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;
-    uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;
     uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;
     uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;
 
@@ -342,32 +339,6 @@ library ReserveConfiguration {
         return (self.data & ~BORROWING_MASK) != 0;
     }
 
-    /**
-     * @notice Enables or disables stable rate borrowing on the reserve
-     * @param self The reserve configuration
-     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise
-     */
-    function setStableRateBorrowingEnabled(
-        DataTypes.ReserveConfigurationMap memory self,
-        bool enabled
-    ) internal pure {
-        self.data =
-            (self.data & STABLE_BORROWING_MASK) |
-            (uint256(enabled ? 1 : 0) <<
-                STABLE_BORROWING_ENABLED_START_BIT_POSITION);
-    }
-
-    /**
-     * @notice Gets the stable rate borrowing state of the reserve
-     * @param self The reserve configuration
-     * @return The stable rate borrowing state
-     */
-    function getStableRateBorrowingEnabled(
-        DataTypes.ReserveConfigurationMap memory self
-    ) internal pure returns (bool) {
-        return (self.data & ~STABLE_BORROWING_MASK) != 0;
-    }
-
     /**
      * @notice Sets the reserve factor of the reserve
      * @param self The reserve configuration
@@ -547,38 +518,6 @@ library ReserveConfiguration {
             UNBACKED_MINT_CAP_START_BIT_POSITION;
     }
 
-    /**
-     * @notice Sets the eMode asset category
-     * @param self The reserve configuration
-     * @param category The asset category when the user selects the eMode
-     */
-    function setEModeCategory(
-        DataTypes.ReserveConfigurationMap memory self,
-        uint256 category
-    ) internal pure {
-        require(
-            category <= MAX_VALID_EMODE_CATEGORY,
-            Errors.INVALID_EMODE_CATEGORY
-        );
-
-        self.data =
-            (self.data & EMODE_CATEGORY_MASK) |
-            (category << EMODE_CATEGORY_START_BIT_POSITION);
-    }
-
-    /**
-     * @dev Gets the eMode asset category
-     * @param self The reserve configuration
-     * @return The eMode category for the asset
-     */
-    function getEModeCategory(
-        DataTypes.ReserveConfigurationMap memory self
-    ) internal pure returns (uint256) {
-        return
-            (self.data & ~EMODE_CATEGORY_MASK) >>
-            EMODE_CATEGORY_START_BIT_POSITION;
-    }
-
     /**
      * @notice Sets the flashloanable flag for the reserve
      * @param self The reserve configuration
@@ -638,19 +577,17 @@ library ReserveConfiguration {
      * @return The state flag representing active
      * @return The state flag representing frozen
      * @return The state flag representing borrowing enabled
-     * @return The state flag representing stableRateBorrowing enabled
      * @return The state flag representing paused
      */
     function getFlags(
         DataTypes.ReserveConfigurationMap memory self
-    ) internal pure returns (bool, bool, bool, bool, bool) {
+    ) internal pure returns (bool, bool, bool, bool) {
         uint256 dataLocal = self.data;
 
         return (
             (dataLocal & ~ACTIVE_MASK) != 0,
             (dataLocal & ~FROZEN_MASK) != 0,
             (dataLocal & ~BORROWING_MASK) != 0,
-            (dataLocal & ~STABLE_BORROWING_MASK) != 0,
             (dataLocal & ~PAUSED_MASK) != 0
         );
     }
@@ -663,15 +600,10 @@ library ReserveConfiguration {
      * @return The state param representing liquidation bonus
      * @return The state param representing reserve decimals
      * @return The state param representing reserve factor
-     * @return The state param representing eMode category
      */
     function getParams(
         DataTypes.ReserveConfigurationMap memory self
-    )
-        internal
-        pure
-        returns (uint256, uint256, uint256, uint256, uint256, uint256)
-    {
+    ) internal pure returns (uint256, uint256, uint256, uint256, uint256) {
         uint256 dataLocal = self.data;
 
         return (
@@ -682,9 +614,7 @@ library ReserveConfiguration {
                 LIQUIDATION_BONUS_START_BIT_POSITION,
             (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,
             (dataLocal & ~RESERVE_FACTOR_MASK) >>
-                RESERVE_FACTOR_START_BIT_POSITION,
-            (dataLocal & ~EMODE_CATEGORY_MASK) >>
-                EMODE_CATEGORY_START_BIT_POSITION
+                RESERVE_FACTOR_START_BIT_POSITION
         );
     }
 
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ReserveLogic.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/ReserveLogic.sol
index f6215e2..54e3c0e 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ReserveLogic.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/ReserveLogic.sol
@@ -3,7 +3,6 @@ pragma solidity ^0.8.10;
 
 import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
 import {GPv2SafeERC20} from "../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol";
-import {IStableDebtToken} from "../../../interfaces/IStableDebtToken.sol";
 import {IVariableDebtToken} from "../../../interfaces/IVariableDebtToken.sol";
 import {IReserveInterestRateStrategy} from "../../../interfaces/IReserveInterestRateStrategy.sol";
 import {ReserveConfiguration} from "../configuration/ReserveConfiguration.sol";
@@ -138,14 +137,12 @@ library ReserveLogic {
      * @notice Initializes a reserve.
      * @param reserve The reserve object
      * @param aTokenAddress The address of the overlying atoken contract
-     * @param stableDebtTokenAddress The address of the overlying stable debt token contract
      * @param variableDebtTokenAddress The address of the overlying variable debt token contract
      * @param interestRateStrategyAddress The address of the interest rate strategy contract
      */
     function init(
         DataTypes.ReserveData storage reserve,
         address aTokenAddress,
-        address stableDebtTokenAddress,
         address variableDebtTokenAddress,
         address interestRateStrategyAddress
     ) internal {
@@ -157,20 +154,12 @@ library ReserveLogic {
         reserve.liquidityIndex = uint128(WadRayMath.RAY);
         reserve.variableBorrowIndex = uint128(WadRayMath.RAY);
         reserve.aTokenAddress = aTokenAddress;
-        reserve.stableDebtTokenAddress = stableDebtTokenAddress;
         reserve.variableDebtTokenAddress = variableDebtTokenAddress;
         reserve.interestRateStrategyAddress = interestRateStrategyAddress;
     }
 
-    struct UpdateInterestRatesAndVirtualBalanceLocalVars {
-        uint256 nextLiquidityRate;
-        uint256 nextStableRate;
-        uint256 nextVariableRate;
-        uint256 totalVariableDebt;
-    }
-
     /**
-     * @notice Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate.
+     * @notice Updates the reserve current variable borrow rate and the current liquidity rate.
      * @param reserve The reserve reserve to be updated
      * @param reserveCache The caching layer for the reserve data
      * @param reserveAddress The address of the reserve to be updated
@@ -184,38 +173,32 @@ library ReserveLogic {
         uint256 liquidityAdded,
         uint256 liquidityTaken
     ) internal {
-        UpdateInterestRatesAndVirtualBalanceLocalVars memory vars;
-
-        vars.totalVariableDebt = reserveCache.nextScaledVariableDebt.rayMul(
+        uint256 totalVariableDebt = reserveCache.nextScaledVariableDebt.rayMul(
             reserveCache.nextVariableBorrowIndex
         );
 
         (
-            vars.nextLiquidityRate,
-            vars.nextStableRate,
-            vars.nextVariableRate
+            uint256 nextLiquidityRate,
+            uint256 nextVariableRate
         ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)
-            .calculateInterestRates(
-                DataTypes.CalculateInterestRatesParams({
-                    unbacked: reserve.unbacked,
-                    liquidityAdded: liquidityAdded,
-                    liquidityTaken: liquidityTaken,
-                    totalStableDebt: reserveCache.nextTotalStableDebt,
-                    totalVariableDebt: vars.totalVariableDebt,
-                    averageStableBorrowRate: reserveCache
-                        .nextAvgStableBorrowRate,
-                    reserveFactor: reserveCache.reserveFactor,
-                    reserve: reserveAddress,
-                    usingVirtualBalance: reserve
-                        .configuration
-                        .getIsVirtualAccActive(),
-                    virtualUnderlyingBalance: reserve.virtualUnderlyingBalance
-                })
-            );
+                .calculateInterestRates(
+                    DataTypes.CalculateInterestRatesParams({
+                        unbacked: reserve.unbacked,
+                        liquidityAdded: liquidityAdded,
+                        liquidityTaken: liquidityTaken,
+                        totalDebt: totalVariableDebt,
+                        reserveFactor: reserveCache.reserveFactor,
+                        reserve: reserveAddress,
+                        usingVirtualBalance: reserve
+                            .configuration
+                            .getIsVirtualAccActive(),
+                        virtualUnderlyingBalance: reserve
+                            .virtualUnderlyingBalance
+                    })
+                );
 
-        reserve.currentLiquidityRate = vars.nextLiquidityRate.toUint128();
-        reserve.currentStableBorrowRate = vars.nextStableRate.toUint128();
-        reserve.currentVariableBorrowRate = vars.nextVariableRate.toUint128();
+        reserve.currentLiquidityRate = nextLiquidityRate.toUint128();
+        reserve.currentVariableBorrowRate = nextVariableRate.toUint128();
 
         // Only affect virtual balance if the reserve uses it
         if (reserve.configuration.getIsVirtualAccActive()) {
@@ -229,23 +212,14 @@ library ReserveLogic {
 
         emit ReserveDataUpdated(
             reserveAddress,
-            vars.nextLiquidityRate,
-            vars.nextStableRate,
-            vars.nextVariableRate,
+            nextLiquidityRate,
+            0,
+            nextVariableRate,
             reserveCache.nextLiquidityIndex,
             reserveCache.nextVariableBorrowIndex
         );
     }
 
-    struct AccrueToTreasuryLocalVars {
-        uint256 prevTotalStableDebt;
-        uint256 prevTotalVariableDebt;
-        uint256 currTotalVariableDebt;
-        uint256 cumulatedStableInterest;
-        uint256 totalDebtAccrued;
-        uint256 amountToMint;
-    }
-
     /**
      * @notice Mints part of the repaid interest to the reserve treasury as a function of the reserve factor for the
      * specific asset.
@@ -256,47 +230,30 @@ library ReserveLogic {
         DataTypes.ReserveData storage reserve,
         DataTypes.ReserveCache memory reserveCache
     ) internal {
-        AccrueToTreasuryLocalVars memory vars;
-
         if (reserveCache.reserveFactor == 0) {
             return;
         }
 
         //calculate the total variable debt at moment of the last interaction
-        vars.prevTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(
-            reserveCache.currVariableBorrowIndex
-        );
+        uint256 prevTotalVariableDebt = reserveCache
+            .currScaledVariableDebt
+            .rayMul(reserveCache.currVariableBorrowIndex);
 
         //calculate the new total variable debt after accumulation of the interest on the index
-        vars.currTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(
-            reserveCache.nextVariableBorrowIndex
-        );
-
-        //calculate the stable debt until the last timestamp update
-        vars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(
-            reserveCache.currAvgStableBorrowRate,
-            reserveCache.stableDebtLastUpdateTimestamp,
-            reserveCache.reserveLastUpdateTimestamp
-        );
-
-        vars.prevTotalStableDebt = reserveCache.currPrincipalStableDebt.rayMul(
-            vars.cumulatedStableInterest
-        );
+        uint256 currTotalVariableDebt = reserveCache
+            .currScaledVariableDebt
+            .rayMul(reserveCache.nextVariableBorrowIndex);
 
         //debt accrued is the sum of the current debt minus the sum of the debt at the last update
-        vars.totalDebtAccrued =
-            vars.currTotalVariableDebt +
-            reserveCache.currTotalStableDebt -
-            vars.prevTotalVariableDebt -
-            vars.prevTotalStableDebt;
+        uint256 totalDebtAccrued = currTotalVariableDebt -
+            prevTotalVariableDebt;
 
-        vars.amountToMint = vars.totalDebtAccrued.percentMul(
+        uint256 amountToMint = totalDebtAccrued.percentMul(
             reserveCache.reserveFactor
         );
 
-        if (vars.amountToMint != 0) {
-            reserve.accruedToTreasury += vars
-                .amountToMint
+        if (amountToMint != 0) {
+            reserve.accruedToTreasury += amountToMint
                 .rayDiv(reserveCache.nextLiquidityIndex)
                 .toUint128();
         }
@@ -370,7 +327,6 @@ library ReserveLogic {
         reserveCache.currVariableBorrowRate = reserve.currentVariableBorrowRate;
 
         reserveCache.aTokenAddress = reserve.aTokenAddress;
-        reserveCache.stableDebtTokenAddress = reserve.stableDebtTokenAddress;
         reserveCache.variableDebtTokenAddress = reserve
             .variableDebtTokenAddress;
 
@@ -381,20 +337,6 @@ library ReserveLogic {
             reserveCache.variableDebtTokenAddress
         ).scaledTotalSupply();
 
-        (
-            reserveCache.currPrincipalStableDebt,
-            reserveCache.currTotalStableDebt,
-            reserveCache.currAvgStableBorrowRate,
-            reserveCache.stableDebtLastUpdateTimestamp
-        ) = IStableDebtToken(reserveCache.stableDebtTokenAddress)
-            .getSupplyData();
-
-        // by default the actions are considered as not affecting the debt balances.
-        // if the action involves mint/burn of debt, the cache needs to be updated
-        reserveCache.nextTotalStableDebt = reserveCache.currTotalStableDebt;
-        reserveCache.nextAvgStableBorrowRate = reserveCache
-            .currAvgStableBorrowRate;
-
         return reserveCache;
     }
 }
diff --git a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ValidationLogic.sol b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/ValidationLogic.sol
index 2437438..64aa0db 100644
--- a/tmp/100_0xe07E26f316248a2aa14115439a0bd9Ea49328Dc7_flat/ValidationLogic.sol
+++ b/tmp/100_0x8a48EF9287c402C119c14a5f6897F6dFdc12cb45_flat/ValidationLogic.sol
@@ -5,6 +5,7 @@ import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
 import {Address} from "../../../dependencies/openzeppelin/contracts/Address.sol";
 import {GPv2SafeERC20} from "../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol";
 import {IReserveInterestRateStrategy} from "../../../interfaces/IReserveInterestRateStrategy.sol";
+import {IScaledBalanceToken} from "../../../interfaces/IScaledBalanceToken.sol";
 import {IPriceOracleGetter} from "../../../interfaces/IPriceOracleGetter.sol";
 import {IAToken} from "../../../interfaces/IAToken.sol";
 import {IPriceOracleSentinel} from "../../../interfaces/IPriceOracleSentinel.sol";
@@ -12,6 +13,7 @@ import {IPoolAddressesProvider} from "../../../interfaces/IPoolAddressesProvider
 import {IAccessControl} from "../../../dependencies/openzeppelin/contracts/IAccessControl.sol";
 import {ReserveConfiguration} from "../configuration/ReserveConfiguration.sol";
 import {UserConfiguration} from "../configuration/UserConfiguration.sol";
+import {EModeConfiguration} from "../configuration/EModeConfiguration.sol";
 import {Errors} from "../helpers/Errors.sol";
 import {WadRayMath} from "../math/WadRayMath.sol";
 import {PercentageMath} from "../math/PercentageMath.sol";
@@ -70,7 +72,7 @@ library ValidationLogic {
     ) internal view {
         require(amount != 0, Errors.INVALID_AMOUNT);
 
-        (bool isActive, bool isFrozen, , , bool isPaused) = reserveCache
+        (bool isActive, bool isFrozen, , bool isPaused) = reserveCache
             .reserveConfiguration
             .getFlags();
         require(isActive, Errors.RESERVE_INACTIVE);
@@ -111,7 +113,7 @@ library ValidationLogic {
             Errors.NOT_ENOUGH_AVAILABLE_USER_BALANCE
         );
 
-        (bool isActive, , , , bool isPaused) = reserveCache
+        (bool isActive, , , bool isPaused) = reserveCache
             .reserveConfiguration
             .getFlags();
         require(isActive, Errors.RESERVE_INACTIVE);
@@ -131,13 +133,11 @@ library ValidationLogic {
         uint256 borrowCap;
         uint256 amountInBaseCurrency;
         uint256 assetUnit;
-        address eModePriceSource;
         address siloedBorrowingAddress;
         bool isActive;
         bool isFrozen;
         bool isPaused;
         bool borrowingEnabled;
-        bool stableRateBorrowingEnabled;
         bool siloedBorrowingEnabled;
     }
 
@@ -162,7 +162,6 @@ library ValidationLogic {
             vars.isActive,
             vars.isFrozen,
             vars.borrowingEnabled,
-            vars.stableRateBorrowingEnabled,
             vars.isPaused
         ) = params.reserveCache.reserveConfiguration.getFlags();
 
@@ -186,8 +185,7 @@ library ValidationLogic {
 
         //validate interest rate mode
         require(
-            params.interestRateMode == DataTypes.InterestRateMode.VARIABLE ||
-                params.interestRateMode == DataTypes.InterestRateMode.STABLE,
+            params.interestRateMode == DataTypes.InterestRateMode.VARIABLE,
             Errors.INVALID_INTEREST_RATE_MODE_SELECTED
         );
 
@@ -209,10 +207,7 @@ library ValidationLogic {
                 .currScaledVariableDebt
                 .rayMul(params.reserveCache.nextVariableBorrowIndex);
 
-            vars.totalDebt =
-                params.reserveCache.currTotalStableDebt +
-                vars.totalSupplyVariableDebt +
-                params.amount;
+            vars.totalDebt = vars.totalSupplyVariableDebt + params.amount;
 
             unchecked {
                 require(
@@ -248,12 +243,12 @@ library ValidationLogic {
 
         if (params.userEModeCategory != 0) {
             require(
-                params.reserveCache.reserveConfiguration.getEModeCategory() ==
-                    params.userEModeCategory,
-                Errors.INCONSISTENT_EMODE_CATEGORY
+                EModeConfiguration.isReserveEnabledOnBitmap(
+                    eModeCategories[params.userEModeCategory].borrowableBitmap,
+                    reservesData[params.asset].id
+                ),
+                Errors.NOT_BORROWABLE_IN_EMODE
             );
-            vars.eModePriceSource = eModeCategories[params.userEModeCategory]
-                .priceSource;
         }
 
         (
@@ -288,11 +283,7 @@ library ValidationLogic {
         );
 
         vars.amountInBaseCurrency =
-            IPriceOracleGetter(params.oracle).getAssetPrice(
-                vars.eModePriceSource != address(0)
-                    ? vars.eModePriceSource
-                    : params.asset
-            ) *
+            IPriceOracleGetter(params.oracle).getAssetPrice(params.asset) *
             params.amount;
         unchecked {
             vars.amountInBaseCurrency /= vars.assetUnit;
@@ -308,49 +299,6 @@ library ValidationLogic {
             Errors.COLLATERAL_CANNOT_COVER_NEW_BORROW
         );
 
-        /**
-         * Following conditions need to be met if the user is borrowing at a stable rate:
-         * 1. Reserve must be enabled for stable rate borrowing
-         * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency
-         *    they are borrowing, to prevent abuses.
-         * 3. Users will be able to borrow only a portion of the total available liquidity
-         */
-
-        if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {
-            //check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve
-
-            require(
-                vars.stableRateBorrowingEnabled,
-                Errors.STABLE_BORROWING_NOT_ENABLED
-            );
-
-            require(
-                !params.userConfig.isUsingAsCollateral(
-                    reservesData[params.asset].id
-                ) ||
-                    params.reserveCache.reserveConfiguration.getLtv() == 0 ||
-                    params.amount >
-                    IERC20(params.reserveCache.aTokenAddress).balanceOf(
-                        params.userAddress
-                    ),
-                Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY
-            );
-
-            vars.availableLiquidity = reservesData[params.asset]
-                .virtualUnderlyingBalance;
-
-            //calculate the max available loan size in stable rate mode as a percentage of the
-            //available liquidity
-            uint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(
-                params.maxStableLoanPercent
-            );
-
-            require(
-                params.amount <= maxLoanSizeStable,
-                Errors.AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE
-            );
-        }
-
         if (params.userConfig.isBorrowingAny()) {
             (vars.siloedBorrowingEnabled, vars.siloedBorrowingAddress) = params
                 .userConfig
@@ -377,145 +325,33 @@ library ValidationLogic {
      * @notice Validates a repay action.
      * @param reserveCache The cached data of the reserve
      * @param amountSent The amount sent for the repayment. Can be an actual value or uint(-1)
-     * @param interestRateMode The interest rate mode of the debt being repaid
      * @param onBehalfOf The address of the user msg.sender is repaying for
-     * @param stableDebt The borrow balance of the user
-     * @param variableDebt The borrow balance of the user
+     * @param debt The borrow balance of the user
      */
     function validateRepay(
         DataTypes.ReserveCache memory reserveCache,
         uint256 amountSent,
         DataTypes.InterestRateMode interestRateMode,
         address onBehalfOf,
-        uint256 stableDebt,
-        uint256 variableDebt
+        uint256 debt
     ) internal view {
         require(amountSent != 0, Errors.INVALID_AMOUNT);
         require(
-            amountSent != type(uint256).max || msg.sender == onBehalfOf,
-            Errors.NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF
+            interestRateMode == DataTypes.InterestRateMode.VARIABLE,
+            Errors.INVALID_INTEREST_RATE_MODE_SELECTED
         );
-
-        (bool isActive, , , , bool isPaused) = reserveCache
-            .reserveConfiguration
-            .getFlags();
-        require(isActive, Errors.RESERVE_INACTIVE);
-        require(!isPaused, Errors.RESERVE_PAUSED);
-
         require(
-            (stableDebt != 0 &&
-                interestRateMode == DataTypes.InterestRateMode.STABLE) ||
-                (variableDebt != 0 &&
-                    interestRateMode == DataTypes.InterestRateMode.VARIABLE),
-            Errors.NO_DEBT_OF_SELECTED_TYPE
+            amountSent != type(uint256).max || msg.sender == onBehalfOf,
+            Errors.NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF
         );
-    }
-
-    /**
-     * @notice Validates a swap of borrow rate mode.
-     * @param reserve The reserve state on which the user is swapping the rate
-     * @param reserveCache The cached data of the reserve
-     * @param userConfig The user reserves configuration
-     * @param stableDebt The stable debt of the user
-     * @param variableDebt The variable debt of the user
-     * @param currentRateMode The rate mode of the debt being swapped
-     */
-    function validateSwapRateMode(
-        DataTypes.ReserveData storage reserve,
-        DataTypes.ReserveCache memory reserveCache,
-        DataTypes.UserConfigurationMap storage userConfig,
-        uint256 stableDebt,
-        uint256 variableDebt,
-        DataTypes.InterestRateMode currentRateMode
-    ) internal view {
-        (
-            bool isActive,
-            ,
-            ,
-            bool stableRateEnabled,
-            bool isPaused
-        ) = reserveCache.reserveConfiguration.getFlags();
-        require(isActive, Errors.RESERVE_INACTIVE);
-        require(!isPaused, Errors.RESERVE_PAUSED);
 
-        if (currentRateMode == DataTypes.InterestRateMode.STABLE) {
-            require(stableDebt != 0, Errors.NO_OUTSTANDING_STABLE_DEBT);
-        } else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {
-            require(variableDebt != 0, Errors.NO_OUTSTANDING_VARIABLE_DEBT);
-            /**
-             * user wants to swap to stable, before swapping we need to ensure that
-             * 1. stable borrow rate is enabled on the reserve
-             * 2. user is not trying to abuse the reserve by supplying
-             * more collateral than he is borrowing, artificially lowering
-             * the interest rate, borrowing at variable, and switching to stable
-             */
-            require(stableRateEnabled, Errors.STABLE_BORROWING_NOT_ENABLED);
-
-            require(
-                !userConfig.isUsingAsCollateral(reserve.id) ||
-                    reserveCache.reserveConfiguration.getLtv() == 0 ||
-                    stableDebt + variableDebt >
-                    IERC20(reserveCache.aTokenAddress).balanceOf(msg.sender),
-                Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY
-            );
-        } else {
-            revert(Errors.INVALID_INTEREST_RATE_MODE_SELECTED);
-        }
-    }
-
-    /**
-     * @notice Validates a stable borrow rate rebalance action.
-     * @dev Rebalancing is accepted when depositors are earning <= 90% of their earnings in pure supply/demand market (variable rate only)
-     * For this to be the case, there has to be quite large stable debt with an interest rate below the current variable rate.
-     * @param reserve The reserve state on which the user is getting rebalanced
-     * @param reserveCache The cached state of the reserve
-     * @param reserveAddress The address of the reserve
-     */
-    function validateRebalanceStableBorrowRate(
-        DataTypes.ReserveData storage reserve,
-        DataTypes.ReserveCache memory reserveCache,
-        address reserveAddress
-    ) internal view {
-        (bool isActive, , , , bool isPaused) = reserveCache
+        (bool isActive, , , bool isPaused) = reserveCache
             .reserveConfiguration
             .getFlags();
         require(isActive, Errors.RESERVE_INACTIVE);
         require(!isPaused, Errors.RESERVE_PAUSED);
 
-        uint256 totalDebt = IERC20(reserveCache.stableDebtTokenAddress)
-            .totalSupply() +
-            IERC20(reserveCache.variableDebtTokenAddress).totalSupply();
-
-        (
-            uint256 liquidityRateVariableDebtOnly,
-            ,
-
-        ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)
-                .calculateInterestRates(
-                    DataTypes.CalculateInterestRatesParams({
-                        unbacked: reserve.unbacked,
-                        liquidityAdded: 0,
-                        liquidityTaken: 0,
-                        totalStableDebt: 0,
-                        totalVariableDebt: totalDebt,
-                        averageStableBorrowRate: 0,
-                        reserveFactor: reserveCache.reserveFactor,
-                        reserve: reserveAddress,
-                        usingVirtualBalance: reserve
-                            .configuration
-                            .getIsVirtualAccActive(),
-                        virtualUnderlyingBalance: reserve
-                            .virtualUnderlyingBalance
-                    })
-                );
-
-        require(
-            reserveCache.currLiquidityRate <=
-                liquidityRateVariableDebtOnly.percentMul(
-                    REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD
-                ),
-            Errors.INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET
-        );
+        require(debt != 0, Errors.NO_DEBT_OF_SELECTED_TYPE);
     }
 
     /**
@@ -529,7 +365,7 @@ library ValidationLogic {
     ) internal pure {
         require(userBalance != 0, Errors.UNDERLYING_BALANCE_ZERO);
 
-        (bool isActive, , , , bool isPaused) = reserveCache
+        (bool isActive, , , bool isPaused) = reserveCache
             .reserveConfiguration
             .getFlags();
         require(isActive, Errors.RESERVE_INACTIVE);
@@ -609,17 +445,13 @@ library ValidationLogic {
             vars.collateralReserveActive,
             ,
             ,
-            ,
             vars.collateralReservePaused
         ) = collateralReserve.configuration.getFlags();
 
-        (
-            vars.principalReserveActive,
-            ,
-            ,
-            ,
-            vars.principalReservePaused
-        ) = params.debtReserveCache.reserveConfiguration.getFlags();
+        (vars.principalReserveActive, , , vars.principalReservePaused) = params
+            .debtReserveCache
+            .reserveConfiguration
+            .getFlags();
 
         require(
             vars.collateralReserveActive && vars.principalReserveActive,
@@ -778,10 +610,6 @@ library ValidationLogic {
             reserve.id != 0 || reservesList[0] == asset,
             Errors.ASSET_NOT_LISTED
         );
-        require(
-            IERC20(reserve.stableDebtTokenAddress).totalSupply() == 0,
-            Errors.STABLE_DEBT_NOT_ZERO
-        );
         require(
             IERC20(reserve.variableDebtTokenAddress).totalSupply() == 0,
             Errors.VARIABLE_DEBT_SUPPLY_NOT_ZERO
@@ -795,25 +623,23 @@ library ValidationLogic {
 
     /**
      * @notice Validates the action of setting efficiency mode.
-     * @param reservesData The state of all the reserves
-     * @param reservesList The addresses of all the active reserves
      * @param eModeCategories a mapping storing configurations for all efficiency mode categories
      * @param userConfig the user configuration
      * @param reservesCount The total number of valid reserves
      * @param categoryId The id of the category
      */
     function validateSetUserEMode(
-        mapping(address => DataTypes.ReserveData) storage reservesData,
-        mapping(uint256 => address) storage reservesList,
         mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
         DataTypes.UserConfigurationMap memory userConfig,
         uint256 reservesCount,
         uint8 categoryId
     ) internal view {
+        DataTypes.EModeCategory storage eModeCategory = eModeCategories[
+            categoryId
+        ];
         // category is invalid if the liq threshold is not set
         require(
-            categoryId == 0 ||
-                eModeCategories[categoryId].liquidationThreshold != 0,
+            categoryId == 0 || eModeCategory.liquidationThreshold != 0,
             Errors.INCONSISTENT_EMODE_CATEGORY
         );
 
@@ -828,12 +654,12 @@ library ValidationLogic {
             unchecked {
                 for (uint256 i = 0; i < reservesCount; i++) {
                     if (userConfig.isBorrowing(i)) {
-                        DataTypes.ReserveConfigurationMap
-                            memory configuration = reservesData[reservesList[i]]
-                                .configuration;
                         require(
-                            configuration.getEModeCategory() == categoryId,
-                            Errors.INCONSISTENT_EMODE_CATEGORY
+                            EModeConfiguration.isReserveEnabledOnBitmap(
+                                eModeCategory.borrowableBitmap,
+                                i
+                            ),
+                            Errors.NOT_BORROWABLE_IN_EMODE
                         );
                     }
                 }
