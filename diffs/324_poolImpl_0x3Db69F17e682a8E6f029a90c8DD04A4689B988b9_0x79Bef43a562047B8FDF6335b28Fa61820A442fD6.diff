diff --git a/tmp/324_0x3Db69F17e682a8E6f029a90c8DD04A4689B988b9_flat/CustomInitialize.sol b/tmp/324_0x3Db69F17e682a8E6f029a90c8DD04A4689B988b9_flat/CustomInitialize.sol
deleted file mode 100644
index adbc524..0000000
--- a/tmp/324_0x3Db69F17e682a8E6f029a90c8DD04A4689B988b9_flat/CustomInitialize.sol
+++ /dev/null
@@ -1,31 +0,0 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity ^0.8.0;
-
-import {DataTypes} from "aave-v3-origin/contracts/protocol/pool/Pool.sol";
-import {IERC20} from "aave-v3-origin/contracts/dependencies/openzeppelin/contracts/IERC20.sol";
-import {SafeCast} from "aave-v3-origin/contracts/dependencies/openzeppelin/contracts/SafeCast.sol";
-import {WadRayMath} from "aave-v3-origin/contracts/protocol/libraries/math/WadRayMath.sol";
-import {MathUtils} from "aave-v3-origin/contracts/protocol/libraries/math/MathUtils.sol";
-import {ReserveConfiguration} from "aave-v3-origin/contracts/protocol/libraries/configuration/ReserveConfiguration.sol";
-import {ReserveLogic} from "aave-v3-origin/contracts/protocol/libraries/logic/ReserveLogic.sol";
-
-library CustomInitialize {
-    using ReserveLogic for DataTypes.ReserveCache;
-    using ReserveLogic for DataTypes.ReserveData;
-    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
-
-    function initialize(
-        uint256 reservesCount,
-        mapping(uint256 => address) storage _reservesList,
-        mapping(address => DataTypes.ReserveData) storage _reserves
-    ) internal {
-        for (uint256 i = 0; i < reservesCount; i++) {
-            address currentReserveAddress = _reservesList[i];
-            DataTypes.ReserveData storage currentReserve = _reserves[
-                currentReserveAddress
-            ];
-            currentReserve.__deprecatedStableDebtTokenAddress = address(0);
-            require(currentReserve.__deprecatedStableBorrowRate == 0);
-        }
-    }
-}
diff --git a/tmp/324_0x3Db69F17e682a8E6f029a90c8DD04A4689B988b9_flat/Pool.sol b/tmp/324_0x79Bef43a562047B8FDF6335b28Fa61820A442fD6_flat/Pool.sol
index d46f444..2808d35 100644
--- a/tmp/324_0x3Db69F17e682a8E6f029a90c8DD04A4689B988b9_flat/Pool.sol
+++ b/tmp/324_0x79Bef43a562047B8FDF6335b28Fa61820A442fD6_flat/Pool.sol
@@ -483,6 +483,12 @@ abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
         res.accruedToTreasury = reserve.accruedToTreasury;
         res.unbacked = reserve.unbacked;
         res.isolationModeTotalDebt = reserve.isolationModeTotalDebt;
+        // This is a temporary workaround for integrations that are broken by Aave 3.2
+        // While the new pool data provider is backward compatible, some integrations hard-code an old implementation
+        // To allow them to not have any infrastructural blocker, a mock must be configured in the Aave Pool Addresses Provider, returning zero on all required view methods, instead of reverting
+        res.stableDebtTokenAddress = ADDRESSES_PROVIDER.getAddress(
+            bytes32("MOCK_STABLE_DEBT")
+        );
         return res;
     }
 
diff --git a/tmp/324_0x3Db69F17e682a8E6f029a90c8DD04A4689B988b9_flat/PoolInstance.sol b/tmp/324_0x79Bef43a562047B8FDF6335b28Fa61820A442fD6_flat/PoolInstance.sol
index 750dfdd..19f9bb3 100644
--- a/tmp/324_0x3Db69F17e682a8E6f029a90c8DD04A4689B988b9_flat/PoolInstance.sol
+++ b/tmp/324_0x79Bef43a562047B8FDF6335b28Fa61820A442fD6_flat/PoolInstance.sol
@@ -1,16 +1,22 @@
 // SPDX-License-Identifier: BUSL-1.1
 pragma solidity ^0.8.0;
 
-import {PoolInstance} from "aave-v3-origin/contracts/instances/PoolInstance.sol";
-import {IPoolAddressesProvider, Errors} from "aave-v3-origin/contracts/protocol/pool/Pool.sol";
-import {CustomInitialize} from "./CustomInitialize.sol";
+import {Pool} from "../protocol/pool/Pool.sol";
+import {IPoolAddressesProvider} from "../interfaces/IPoolAddressesProvider.sol";
+import {Errors} from "../protocol/libraries/helpers/Errors.sol";
 
-/**
- * @notice Pool instance
- */
-contract PoolInstance3_2 is PoolInstance {
-    constructor(IPoolAddressesProvider provider) PoolInstance(provider) {}
+contract PoolInstance is Pool {
+    uint256 public constant POOL_REVISION = 6;
 
+    constructor(IPoolAddressesProvider provider) Pool(provider) {}
+
+    /**
+     * @notice Initializes the Pool.
+     * @dev Function is invoked by the proxy contract when the Pool contract is added to the
+     * PoolAddressesProvider of the market.
+     * @dev Caching the address of the PoolAddressesProvider in order to reduce gas consumption on subsequent operations
+     * @param provider The address of the PoolAddressesProvider
+     */
     function initialize(
         IPoolAddressesProvider provider
     ) external virtual override initializer {
@@ -18,6 +24,9 @@ contract PoolInstance3_2 is PoolInstance {
             provider == ADDRESSES_PROVIDER,
             Errors.INVALID_ADDRESSES_PROVIDER
         );
-        CustomInitialize.initialize(_reservesCount, _reservesList, _reserves);
+    }
+
+    function getRevision() internal pure virtual override returns (uint256) {
+        return POOL_REVISION;
     }
 }
