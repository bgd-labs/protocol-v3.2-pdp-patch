diff --git a/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/CustomInitialize.sol b/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/CustomInitialize.sol
deleted file mode 100644
index 8b16d14..0000000
--- a/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/CustomInitialize.sol
+++ /dev/null
@@ -1,31 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
-
-import {DataTypes} from "aave-v3-origin/contracts/protocol/pool/Pool.sol";
-import {IERC20} from "aave-v3-origin/contracts/dependencies/openzeppelin/contracts/IERC20.sol";
-import {SafeCast} from "aave-v3-origin/contracts/dependencies/openzeppelin/contracts/SafeCast.sol";
-import {WadRayMath} from "aave-v3-origin/contracts/protocol/libraries/math/WadRayMath.sol";
-import {MathUtils} from "aave-v3-origin/contracts/protocol/libraries/math/MathUtils.sol";
-import {ReserveConfiguration} from "aave-v3-origin/contracts/protocol/libraries/configuration/ReserveConfiguration.sol";
-import {ReserveLogic} from "aave-v3-origin/contracts/protocol/libraries/logic/ReserveLogic.sol";
-
-library CustomInitialize {
-    using ReserveLogic for DataTypes.ReserveCache;
-    using ReserveLogic for DataTypes.ReserveData;
-    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
-
-    function initialize(
-        uint256 reservesCount,
-        mapping(uint256 => address) storage _reservesList,
-        mapping(address => DataTypes.ReserveData) storage _reserves
-    ) internal {
-        for (uint256 i = 0; i < reservesCount; i++) {
-            address currentReserveAddress = _reservesList[i];
-            DataTypes.ReserveData storage currentReserve = _reserves[
-                currentReserveAddress
-            ];
-            currentReserve.__deprecatedStableDebtTokenAddress = address(0);
-            require(currentReserve.__deprecatedStableBorrowRate == 0);
-        }
-    }
-}
diff --git a/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/IPool.sol b/tmp/43114_0x5DFb8c777C19d3cEdcDc7398d2EeF1FB0b9b05c9_flat/IPool.sol
index 3561fff..ab70b8f 100644
--- a/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/IPool.sol
+++ b/tmp/43114_0x5DFb8c777C19d3cEdcDc7398d2EeF1FB0b9b05c9_flat/IPool.sol
@@ -602,6 +602,7 @@ interface IPool {
 
     /**
      * @notice Returns the state and configuration of the reserve, including extra data included with Aave v3.1
+     * @dev DEPRECATED use independent getters instead (getReserveData, getLiquidationGracePeriod)
      * @param asset The address of the underlying asset of the reserve
      * @return The state and configuration data of the reserve with virtual accounting
      */
diff --git a/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/Pool.sol b/tmp/43114_0x5DFb8c777C19d3cEdcDc7398d2EeF1FB0b9b05c9_flat/Pool.sol
index d46f444..914ad48 100644
--- a/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/Pool.sol
+++ b/tmp/43114_0x5DFb8c777C19d3cEdcDc7398d2EeF1FB0b9b05c9_flat/Pool.sol
@@ -483,6 +483,12 @@ abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
         res.accruedToTreasury = reserve.accruedToTreasury;
         res.unbacked = reserve.unbacked;
         res.isolationModeTotalDebt = reserve.isolationModeTotalDebt;
+        // This is a temporary workaround for integrations that are broken by Aave 3.2
+        // While the new pool data provider is backward compatible, some integrations hard-code an old implementation
+        // To allow them to unlock the funds, the pool address provider is setting a stable debt token, so balanceOf() and totalSupply() will return zero instead of reverting
+        res.stableDebtTokenAddress = ADDRESSES_PROVIDER.getAddress(
+            bytes32("MOCK_STABLE_DEBT")
+        );
         return res;
     }
 
diff --git a/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/PoolInstance.sol b/tmp/43114_0x5DFb8c777C19d3cEdcDc7398d2EeF1FB0b9b05c9_flat/PoolInstance.sol
index 31d76b6..19f9bb3 100644
--- a/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/PoolInstance.sol
+++ b/tmp/43114_0x5DFb8c777C19d3cEdcDc7398d2EeF1FB0b9b05c9_flat/PoolInstance.sol
@@ -1,16 +1,22 @@
-// SPDX-License-Identifier: MIT
+// SPDX-License-Identifier: BUSL-1.1
 pragma solidity ^0.8.0;
 
-import {PoolInstance} from "aave-v3-origin/contracts/instances/PoolInstance.sol";
-import {IPoolAddressesProvider, Errors} from "aave-v3-origin/contracts/protocol/pool/Pool.sol";
-import {CustomInitialize} from "./CustomInitialize.sol";
+import {Pool} from "../protocol/pool/Pool.sol";
+import {IPoolAddressesProvider} from "../interfaces/IPoolAddressesProvider.sol";
+import {Errors} from "../protocol/libraries/helpers/Errors.sol";
 
-/**
- * @notice Pool instance
- */
-contract PoolInstance3_2 is PoolInstance {
-    constructor(IPoolAddressesProvider provider) PoolInstance(provider) {}
+contract PoolInstance is Pool {
+    uint256 public constant POOL_REVISION = 6;
 
+    constructor(IPoolAddressesProvider provider) Pool(provider) {}
+
+    /**
+     * @notice Initializes the Pool.
+     * @dev Function is invoked by the proxy contract when the Pool contract is added to the
+     * PoolAddressesProvider of the market.
+     * @dev Caching the address of the PoolAddressesProvider in order to reduce gas consumption on subsequent operations
+     * @param provider The address of the PoolAddressesProvider
+     */
     function initialize(
         IPoolAddressesProvider provider
     ) external virtual override initializer {
@@ -18,6 +24,9 @@ contract PoolInstance3_2 is PoolInstance {
             provider == ADDRESSES_PROVIDER,
             Errors.INVALID_ADDRESSES_PROVIDER
         );
-        CustomInitialize.initialize(_reservesCount, _reservesList, _reserves);
+    }
+
+    function getRevision() internal pure virtual override returns (uint256) {
+        return POOL_REVISION;
     }
 }
diff --git a/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/ReserveConfiguration.sol b/tmp/43114_0x5DFb8c777C19d3cEdcDc7398d2EeF1FB0b9b05c9_flat/ReserveConfiguration.sol
index fc8bcf4..a7849b1 100644
--- a/tmp/43114_0x1f69d4700B34A1D9F92E55235df414FcC02A8306_flat/ReserveConfiguration.sol
+++ b/tmp/43114_0x5DFb8c777C19d3cEdcDc7398d2EeF1FB0b9b05c9_flat/ReserveConfiguration.sol
@@ -17,6 +17,7 @@ library ReserveConfiguration {
     uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore
+    // @notice there is an unoccupied hole of 1 bit at position 59 from pre 3.2 stableBorrowRateEnabled
     uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore
@@ -25,7 +26,7 @@ library ReserveConfiguration {
     uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
-    //@notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
+    // @notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
     uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
     uint256 internal constant VIRTUAL_ACC_ACTIVE_MASK =        0xEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore
